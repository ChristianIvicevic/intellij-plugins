// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: jdl.flex

package com.intellij.jhipster.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static com.intellij.jhipster.psi.JdlTokenTypes.*;

import it.unimi.dsi.fastutil.ints.IntArrayList;

public class _JdlLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int BRACES_BODY = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1, 1
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\1\u2200\1\u1f00\1\u2300"+
    "\1\u2400\2\u1f00\31\u0100\1\u2500\121\u0100\1\u2600\4\u0100\1\u2700"+
    "\1\u0100\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00\53\u0100"+
    "\1\u2e00\10\u2f00\31\u1f00\1\u0100\1\u3000\1\u3100\1\u0100\1\u3200"+
    "\1\u3300\1\u3400\1\u3500\1\u1f00\1\u3600\1\u3700\1\u3800\1\u3900"+
    "\1\u0100\1\u3a00\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000"+
    "\1\u1f00\1\u4100\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700"+
    "\1\u4800\1\u4900\1\u4a00\1\u4b00\1\u4c00\1\u1f00\1\u4d00\1\u4e00"+
    "\1\u4f00\1\u1f00\3\u0100\1\u5000\1\u5100\1\u5200\12\u1f00\4\u0100"+
    "\1\u5300\17\u1f00\2\u0100\1\u5400\41\u1f00\2\u0100\1\u5500\1\u5600"+
    "\2\u1f00\1\u5700\1\u5800\27\u0100\1\u5900\2\u0100\1\u5a00\45\u1f00"+
    "\1\u0100\1\u5b00\1\u5c00\11\u1f00\1\u5d00\27\u1f00\1\u5e00\1\u5f00"+
    "\1\u6000\1\u6100\11\u1f00\1\u6200\1\u6300\5\u1f00\1\u6400\1\u6500"+
    "\4\u1f00\1\u6600\21\u1f00\246\u0100\1\u6700\20\u0100\1\u6800\1\u6900"+
    "\25\u0100\1\u6a00\34\u0100\1\u6b00\14\u1f00\2\u0100\1\u6c00\u0e05\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\4\22\0\1\1\1\0"+
    "\1\5\5\0\1\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\11\17\1\20\2\0\1\21\2\0"+
    "\1\22\4\23\1\24\25\23\1\25\1\26\1\27\1\0"+
    "\1\30\1\0\1\31\1\23\1\32\1\33\1\34\1\35"+
    "\1\23\1\36\1\37\2\23\1\40\1\41\1\42\1\43"+
    "\1\44\1\23\1\45\1\46\1\47\1\50\1\23\1\51"+
    "\1\52\1\53\1\23\1\54\1\0\1\55\7\0\1\3"+
    "\44\0\1\30\12\0\1\30\4\0\1\30\5\0\27\30"+
    "\1\0\37\30\1\0\u01ca\30\4\0\14\30\16\0\5\30"+
    "\7\0\1\30\1\0\1\30\201\0\5\30\1\0\2\30"+
    "\2\0\4\30\1\0\1\30\6\0\1\30\1\0\3\30"+
    "\1\0\1\30\1\0\24\30\1\0\123\30\1\0\213\30"+
    "\10\0\246\30\1\0\46\30\2\0\1\30\6\0\51\30"+
    "\107\0\33\30\4\0\4\30\55\0\53\30\43\0\2\30"+
    "\1\0\143\30\1\0\1\30\17\0\2\30\7\0\2\30"+
    "\12\0\3\30\2\0\1\30\20\0\1\30\1\0\36\30"+
    "\35\0\131\30\13\0\1\30\30\0\41\30\11\0\2\30"+
    "\4\0\1\30\5\0\26\30\4\0\1\30\11\0\1\30"+
    "\3\0\1\30\27\0\31\30\7\0\13\30\65\0\25\30"+
    "\1\0\10\30\106\0\66\30\3\0\1\30\22\0\1\30"+
    "\7\0\12\30\17\0\20\30\4\0\10\30\2\0\2\30"+
    "\2\0\26\30\1\0\7\30\1\0\1\30\3\0\4\30"+
    "\3\0\1\30\20\0\1\30\15\0\2\30\1\0\3\30"+
    "\16\0\2\30\12\0\1\30\10\0\6\30\4\0\2\30"+
    "\2\0\26\30\1\0\7\30\1\0\2\30\1\0\2\30"+
    "\1\0\2\30\37\0\4\30\1\0\1\30\23\0\3\30"+
    "\20\0\11\30\1\0\3\30\1\0\26\30\1\0\7\30"+
    "\1\0\2\30\1\0\5\30\3\0\1\30\22\0\1\30"+
    "\17\0\2\30\27\0\1\30\13\0\10\30\2\0\2\30"+
    "\2\0\26\30\1\0\7\30\1\0\2\30\1\0\5\30"+
    "\3\0\1\30\36\0\2\30\1\0\3\30\17\0\1\30"+
    "\21\0\1\30\1\0\6\30\3\0\3\30\1\0\4\30"+
    "\3\0\2\30\1\0\1\30\1\0\2\30\3\0\2\30"+
    "\3\0\3\30\3\0\14\30\26\0\1\30\64\0\10\30"+
    "\1\0\3\30\1\0\27\30\1\0\20\30\3\0\1\30"+
    "\32\0\3\30\5\0\2\30\36\0\1\30\4\0\10\30"+
    "\1\0\3\30\1\0\27\30\1\0\12\30\1\0\5\30"+
    "\3\0\1\30\40\0\1\30\1\0\2\30\17\0\2\30"+
    "\22\0\10\30\1\0\3\30\1\0\51\30\2\0\1\30"+
    "\20\0\1\30\5\0\3\30\10\0\3\30\30\0\6\30"+
    "\5\0\22\30\3\0\30\30\1\0\11\30\1\0\1\30"+
    "\2\0\7\30\72\0\60\30\1\0\2\30\14\0\7\30"+
    "\72\0\2\30\1\0\1\30\1\0\5\30\1\0\30\30"+
    "\1\0\1\30\1\0\12\30\1\0\2\30\11\0\1\30"+
    "\2\0\5\30\1\0\1\30\25\0\4\30\40\0\1\30"+
    "\77\0\10\30\1\0\44\30\33\0\5\30\163\0\53\30"+
    "\24\0\1\30\20\0\6\30\4\0\4\30\3\0\1\30"+
    "\3\0\2\30\7\0\3\30\4\0\15\30\14\0\1\30"+
    "\21\0\46\30\1\0\1\30\5\0\1\30\2\0\53\30"+
    "\1\0\115\30\1\0\4\30\2\0\7\30\1\0\1\30"+
    "\1\0\4\30\2\0\51\30\1\0\4\30\2\0\41\30"+
    "\1\0\4\30\2\0\7\30\1\0\1\30\1\0\4\30"+
    "\2\0\17\30\1\0\71\30\1\0\4\30\2\0\103\30"+
    "\45\0\20\30\20\0\126\30\2\0\6\30\3\0\u016c\30"+
    "\2\0\21\30\1\0\32\30\5\0\113\30\6\0\10\30"+
    "\7\0\15\30\1\0\4\30\16\0\22\30\16\0\22\30"+
    "\16\0\15\30\1\0\3\30\17\0\64\30\43\0\1\30"+
    "\4\0\1\30\103\0\131\30\7\0\5\30\2\0\42\30"+
    "\1\0\1\30\5\0\106\30\12\0\37\30\61\0\36\30"+
    "\2\0\5\30\13\0\54\30\4\0\32\30\66\0\27\30"+
    "\11\0\65\30\122\0\1\30\135\0\57\30\21\0\7\30"+
    "\67\0\36\30\15\0\2\30\12\0\54\30\32\0\44\30"+
    "\51\0\3\30\12\0\44\30\2\0\11\30\7\0\53\30"+
    "\2\0\3\30\51\0\4\30\1\0\6\30\1\0\2\30"+
    "\3\0\1\30\5\0\300\30\100\0\26\30\2\0\6\30"+
    "\2\0\46\30\2\0\6\30\2\0\10\30\1\0\1\30"+
    "\1\0\1\30\1\0\1\30\1\0\37\30\2\0\65\30"+
    "\1\0\7\30\1\0\1\30\3\0\3\30\1\0\7\30"+
    "\3\0\4\30\2\0\6\30\4\0\15\30\5\0\3\30"+
    "\1\0\7\30\53\0\2\3\107\0\1\30\15\0\1\30"+
    "\20\0\15\30\145\0\1\30\4\0\1\30\2\0\12\30"+
    "\1\0\1\30\3\0\5\30\6\0\1\30\1\0\1\30"+
    "\1\0\1\30\1\0\4\30\1\0\13\30\2\0\4\30"+
    "\5\0\5\30\4\0\1\30\64\0\2\30\u017b\0\57\30"+
    "\1\0\57\30\1\0\205\30\6\0\4\30\3\0\2\30"+
    "\14\0\46\30\1\0\1\30\5\0\1\30\2\0\70\30"+
    "\7\0\1\30\20\0\27\30\11\0\7\30\1\0\7\30"+
    "\1\0\7\30\1\0\7\30\1\0\7\30\1\0\7\30"+
    "\1\0\7\30\1\0\7\30\120\0\1\30\325\0\2\30"+
    "\52\0\5\30\5\0\2\30\4\0\126\30\6\0\3\30"+
    "\1\0\132\30\1\0\4\30\5\0\53\30\1\0\136\30"+
    "\21\0\33\30\65\0\306\30\112\0\360\30\20\0\215\30"+
    "\103\0\56\30\2\0\15\30\3\0\20\30\12\0\2\30"+
    "\24\0\57\30\20\0\37\30\2\0\106\30\61\0\11\30"+
    "\2\0\147\30\2\0\65\30\2\0\5\30\60\0\13\30"+
    "\1\0\3\30\1\0\4\30\1\0\27\30\35\0\64\30"+
    "\16\0\62\30\76\0\6\30\3\0\1\30\1\0\2\30"+
    "\13\0\34\30\12\0\27\30\31\0\35\30\7\0\57\30"+
    "\34\0\1\30\20\0\5\30\1\0\12\30\12\0\5\30"+
    "\1\0\51\30\27\0\3\30\1\0\10\30\24\0\27\30"+
    "\3\0\1\30\3\0\62\30\1\0\1\30\3\0\2\30"+
    "\2\0\5\30\2\0\1\30\1\0\1\30\30\0\3\30"+
    "\2\0\13\30\7\0\3\30\14\0\6\30\2\0\6\30"+
    "\2\0\6\30\11\0\7\30\1\0\7\30\1\0\53\30"+
    "\1\0\14\30\10\0\163\30\35\0\244\30\14\0\27\30"+
    "\4\0\61\30\4\0\u0100\3\156\30\2\0\152\30\46\0"+
    "\7\30\14\0\5\30\5\0\1\30\1\0\12\30\1\0"+
    "\15\30\1\0\5\30\1\0\1\30\1\0\2\30\1\0"+
    "\2\30\1\0\154\30\41\0\153\30\22\0\100\30\2\0"+
    "\66\30\50\0\14\30\164\0\5\30\1\0\207\30\44\0"+
    "\32\30\6\0\32\30\13\0\131\30\3\0\6\30\2\0"+
    "\6\30\2\0\6\30\2\0\3\30\43\0\14\30\1\0"+
    "\32\30\1\0\23\30\1\0\2\30\1\0\17\30\2\0"+
    "\16\30\42\0\173\30\205\0\35\30\3\0\61\30\57\0"+
    "\40\30\15\0\24\30\1\0\10\30\6\0\46\30\12\0"+
    "\36\30\2\0\44\30\4\0\10\30\60\0\236\30\22\0"+
    "\44\30\4\0\44\30\4\0\50\30\10\0\64\30\234\0"+
    "\67\30\11\0\26\30\12\0\10\30\230\0\6\30\2\0"+
    "\1\30\1\0\54\30\1\0\2\30\3\0\1\30\2\0"+
    "\27\30\12\0\27\30\11\0\37\30\101\0\23\30\1\0"+
    "\2\30\12\0\26\30\12\0\32\30\106\0\70\30\6\0"+
    "\2\30\100\0\1\30\17\0\4\30\1\0\3\30\1\0"+
    "\35\30\52\0\35\30\3\0\35\30\43\0\10\30\1\0"+
    "\34\30\33\0\66\30\12\0\26\30\12\0\23\30\15\0"+
    "\22\30\156\0\111\30\67\0\63\30\15\0\63\30\15\0"+
    "\44\30\334\0\35\30\12\0\1\30\10\0\26\30\232\0"+
    "\27\30\14\0\65\30\113\0\55\30\40\0\31\30\32\0"+
    "\44\30\35\0\1\30\13\0\43\30\3\0\1\30\14\0"+
    "\60\30\16\0\4\30\25\0\1\30\1\0\1\30\43\0"+
    "\22\30\1\0\31\30\124\0\7\30\1\0\1\30\1\0"+
    "\4\30\1\0\17\30\1\0\12\30\7\0\57\30\46\0"+
    "\10\30\2\0\2\30\2\0\26\30\1\0\7\30\1\0"+
    "\2\30\1\0\5\30\3\0\1\30\22\0\1\30\14\0"+
    "\5\30\236\0\65\30\22\0\4\30\24\0\1\30\40\0"+
    "\60\30\24\0\2\30\1\0\1\30\270\0\57\30\51\0"+
    "\4\30\44\0\60\30\24\0\1\30\73\0\53\30\15\0"+
    "\1\30\107\0\33\30\345\0\54\30\164\0\100\30\37\0"+
    "\1\30\240\0\10\30\2\0\47\30\20\0\1\30\1\0"+
    "\1\30\34\0\1\30\12\0\50\30\7\0\1\30\25\0"+
    "\1\30\13\0\56\30\23\0\1\30\42\0\71\30\7\0"+
    "\11\30\1\0\45\30\21\0\1\30\61\0\36\30\160\0"+
    "\7\30\1\0\2\30\1\0\46\30\25\0\1\30\31\0"+
    "\6\30\1\0\2\30\1\0\40\30\16\0\1\30\u0147\0"+
    "\23\30\15\0\232\30\346\0\304\30\274\0\57\30\321\0"+
    "\107\30\271\0\71\30\7\0\37\30\161\0\36\30\22\0"+
    "\60\30\20\0\4\30\37\0\25\30\5\0\23\30\260\0"+
    "\100\30\200\0\113\30\5\0\1\30\102\0\15\30\100\0"+
    "\2\30\1\0\1\30\34\0\370\30\10\0\363\30\15\0"+
    "\37\30\61\0\3\30\21\0\4\30\10\0\u018c\30\4\0"+
    "\153\30\5\0\15\30\3\0\11\30\7\0\12\30\146\0"+
    "\125\30\1\0\107\30\1\0\2\30\2\0\1\30\2\0"+
    "\2\30\2\0\4\30\1\0\14\30\1\0\1\30\1\0"+
    "\7\30\1\0\101\30\1\0\4\30\2\0\10\30\1\0"+
    "\7\30\1\0\34\30\1\0\4\30\1\0\5\30\1\0"+
    "\1\30\3\0\7\30\1\0\u0154\30\2\0\31\30\1\0"+
    "\31\30\1\0\37\30\1\0\31\30\1\0\37\30\1\0"+
    "\31\30\1\0\37\30\1\0\31\30\1\0\37\30\1\0"+
    "\31\30\1\0\10\30\64\0\55\30\12\0\7\30\20\0"+
    "\1\30\u0171\0\54\30\24\0\305\30\73\0\104\30\7\0"+
    "\1\30\264\0\4\30\1\0\33\30\1\0\2\30\1\0"+
    "\1\30\2\0\1\30\1\0\12\30\1\0\4\30\1\0"+
    "\1\30\1\0\1\30\6\0\1\30\4\0\1\30\1\0"+
    "\1\30\1\0\1\30\1\0\3\30\1\0\2\30\1\0"+
    "\1\30\2\0\1\30\1\0\1\30\1\0\1\30\1\0"+
    "\1\30\1\0\1\30\1\0\2\30\1\0\1\30\2\0"+
    "\4\30\1\0\7\30\1\0\4\30\1\0\4\30\1\0"+
    "\1\30\1\0\12\30\1\0\21\30\5\0\3\30\1\0"+
    "\5\30\1\0\21\30\104\0\327\30\51\0\65\30\13\0"+
    "\336\30\2\0\u0182\30\16\0\u0131\30\37\0\36\30\342\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[27904];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\2\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\1\1\11\2\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\10\16\1\21\1\22\1\16\2\4\1\23"+
    "\1\11\1\24\1\25\1\11\1\0\1\23\7\16\1\26"+
    "\3\16\2\11\2\24\1\23\6\16\1\27\2\16\1\30"+
    "\1\16\1\24\1\0\3\16\1\31\3\16\1\32\1\33"+
    "\1\24\4\16\1\34\3\16\1\35\1\36\13\16\1\37"+
    "\1\16\1\40\1\16\1\41";

  private static int [] zzUnpackAction() {
    int [] result = new int[106];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\56\0\134\0\212\0\134\0\270\0\346\0\134"+
    "\0\134\0\134\0\134\0\u0114\0\u0142\0\u0170\0\u019e\0\134"+
    "\0\134\0\134\0\u01cc\0\134\0\134\0\u01fa\0\u0228\0\u0256"+
    "\0\u0284\0\u02b2\0\u02e0\0\u030e\0\u033c\0\134\0\134\0\u036a"+
    "\0\134\0\u0398\0\u03c6\0\u03f4\0\u0422\0\u0450\0\u047e\0\u0170"+
    "\0\u04ac\0\u04da\0\u0508\0\u0536\0\u0564\0\u0592\0\u05c0\0\u05ee"+
    "\0\u01cc\0\u061c\0\u064a\0\u0678\0\u06a6\0\u06d4\0\u0702\0\u0730"+
    "\0\u075e\0\u078c\0\u07ba\0\u07e8\0\u0816\0\u0844\0\u0872\0\u01cc"+
    "\0\u08a0\0\u08ce\0\u01cc\0\u08fc\0\u06a6\0\u092a\0\u0958\0\u0986"+
    "\0\u09b4\0\u01cc\0\u09e2\0\u0a10\0\u0a3e\0\u01cc\0\u01cc\0\134"+
    "\0\u0a6c\0\u0a9a\0\u0ac8\0\u0af6\0\u01cc\0\u0b24\0\u0b52\0\u0b80"+
    "\0\u01cc\0\u01cc\0\u0bae\0\u0bdc\0\u0c0a\0\u0c38\0\u0c66\0\u0c94"+
    "\0\u0cc2\0\u0cf0\0\u0d1e\0\u0d4c\0\u0d7a\0\u01cc\0\u0da8\0\u01cc"+
    "\0\u0dd6\0\u01cc";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[106];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\3\1\6\1\7\1\10\1\11"+
    "\1\12\1\3\1\13\1\3\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\2\23\1\24\1\3\1\25\1\23"+
    "\1\26\1\23\1\27\1\30\1\31\7\23\1\32\1\23"+
    "\1\33\1\34\1\35\2\23\1\36\1\37\1\3\1\4"+
    "\1\5\1\3\1\6\1\7\1\10\1\11\1\12\1\3"+
    "\1\13\1\3\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\2\23\1\24\1\3\1\25\4\23\1\40\1\31"+
    "\11\23\1\33\1\34\1\35\2\23\1\36\1\37\57\0"+
    "\1\4\56\0\1\5\53\0\2\7\1\0\1\7\1\0"+
    "\1\41\20\7\1\42\27\7\16\0\2\43\36\0\10\44"+
    "\1\45\4\44\1\46\10\44\1\47\27\44\14\0\1\43"+
    "\1\0\2\50\4\0\1\51\7\0\1\51\35\0\1\43"+
    "\1\0\2\17\4\0\1\51\7\0\1\51\34\0\2\23"+
    "\1\0\2\23\3\0\2\23\3\0\24\23\15\0\2\23"+
    "\1\0\2\23\3\0\2\23\3\0\14\23\1\52\7\23"+
    "\15\0\2\23\1\0\2\23\3\0\2\23\3\0\4\23"+
    "\1\53\17\23\15\0\2\23\1\0\2\23\3\0\2\23"+
    "\3\0\12\23\1\54\7\23\1\55\1\23\15\0\2\23"+
    "\1\0\2\23\3\0\2\23\3\0\1\23\1\56\11\23"+
    "\1\57\10\23\15\0\2\23\1\0\2\23\3\0\2\23"+
    "\3\0\4\23\1\60\17\23\15\0\2\23\1\0\2\23"+
    "\3\0\2\23\3\0\13\23\1\61\1\23\1\62\6\23"+
    "\15\0\2\23\1\0\2\23\3\0\2\23\3\0\16\23"+
    "\1\63\5\23\15\0\2\23\1\0\2\23\3\0\2\23"+
    "\3\0\7\23\1\64\14\23\15\0\2\23\1\0\2\23"+
    "\3\0\2\23\3\0\22\23\1\55\1\23\2\0\2\7"+
    "\1\0\1\7\1\0\51\7\16\0\2\43\4\0\1\51"+
    "\7\0\1\51\21\0\15\44\1\65\10\44\1\47\27\44"+
    "\10\45\1\66\4\45\1\67\10\45\1\70\27\45\2\46"+
    "\3\0\51\46\26\44\1\47\27\44\11\0\1\71\1\0"+
    "\1\71\2\0\2\71\51\0\2\23\1\0\2\23\3\0"+
    "\2\23\3\0\14\23\1\72\7\23\15\0\2\23\1\0"+
    "\2\23\3\0\2\23\3\0\14\23\1\73\7\23\15\0"+
    "\2\23\1\0\2\23\3\0\2\23\3\0\17\23\1\74"+
    "\1\75\3\23\15\0\2\23\1\0\2\23\3\0\2\23"+
    "\3\0\2\23\1\76\21\23\15\0\2\23\1\0\2\23"+
    "\3\0\2\23\3\0\10\23\1\77\13\23\15\0\2\23"+
    "\1\0\2\23\3\0\2\23\3\0\15\23\1\100\6\23"+
    "\15\0\2\23\1\0\2\23\3\0\2\23\3\0\10\23"+
    "\1\101\13\23\15\0\2\23\1\0\2\23\3\0\2\23"+
    "\3\0\20\23\1\102\3\23\15\0\2\23\1\0\2\23"+
    "\3\0\2\23\3\0\4\23\1\103\17\23\15\0\2\23"+
    "\1\0\2\23\3\0\2\23\3\0\17\23\1\104\4\23"+
    "\25\0\2\65\4\0\23\65\2\0\10\45\1\66\4\45"+
    "\1\105\10\45\1\70\27\45\10\67\1\106\45\67\10\45"+
    "\1\66\15\45\1\70\27\45\16\0\2\71\51\0\2\23"+
    "\1\0\2\23\3\0\2\23\3\0\10\23\1\107\13\23"+
    "\15\0\2\23\1\0\2\23\3\0\2\23\3\0\10\23"+
    "\1\110\13\23\15\0\2\23\1\0\2\23\3\0\2\23"+
    "\3\0\7\23\1\111\14\23\15\0\2\23\1\0\2\23"+
    "\3\0\2\23\3\0\11\23\1\112\12\23\15\0\2\23"+
    "\1\0\2\23\3\0\2\23\3\0\4\23\1\113\17\23"+
    "\15\0\2\23\1\0\2\23\3\0\2\23\3\0\16\23"+
    "\1\114\5\23\15\0\2\23\1\0\2\23\3\0\2\23"+
    "\3\0\1\23\1\115\22\23\15\0\2\23\1\0\2\23"+
    "\3\0\2\23\3\0\4\23\1\116\17\23\15\0\2\23"+
    "\1\0\2\23\3\0\2\23\3\0\6\23\1\117\15\23"+
    "\2\0\10\67\1\106\4\67\1\120\40\67\13\0\2\23"+
    "\1\0\2\23\3\0\2\23\3\0\7\23\1\121\14\23"+
    "\15\0\2\23\1\0\2\23\3\0\2\23\3\0\13\23"+
    "\1\122\10\23\15\0\2\23\1\0\2\23\3\0\2\23"+
    "\3\0\17\23\1\123\4\23\15\0\2\23\1\0\2\23"+
    "\3\0\2\23\3\0\14\23\1\124\7\23\15\0\2\23"+
    "\1\0\2\23\3\0\2\23\3\0\4\23\1\125\17\23"+
    "\15\0\2\23\1\0\2\23\3\0\2\23\3\0\17\23"+
    "\1\126\4\23\15\0\2\23\1\0\2\23\3\0\2\23"+
    "\3\0\2\23\1\127\21\23\15\0\2\23\1\0\2\23"+
    "\3\0\2\23\3\0\23\23\1\130\15\0\2\23\1\0"+
    "\2\23\3\0\2\23\3\0\23\23\1\131\15\0\2\23"+
    "\1\0\2\23\3\0\2\23\3\0\17\23\1\132\4\23"+
    "\15\0\2\23\1\0\2\23\3\0\2\23\3\0\7\23"+
    "\1\133\14\23\15\0\2\23\1\0\2\23\3\0\2\23"+
    "\3\0\1\23\1\134\22\23\15\0\2\23\1\0\2\23"+
    "\3\0\2\23\3\0\11\23\1\135\12\23\15\0\2\23"+
    "\1\0\2\23\3\0\2\23\3\0\13\23\1\136\10\23"+
    "\15\0\2\23\1\0\2\23\3\0\2\23\3\0\17\23"+
    "\1\137\4\23\15\0\2\23\1\0\2\23\3\0\2\23"+
    "\3\0\4\23\1\140\17\23\15\0\2\23\1\0\2\23"+
    "\3\0\2\23\3\0\12\23\1\141\11\23\15\0\2\23"+
    "\1\0\2\23\3\0\2\23\3\0\7\23\1\142\14\23"+
    "\15\0\2\23\1\0\2\23\3\0\2\23\3\0\12\23"+
    "\1\143\11\23\15\0\2\23\1\0\2\23\3\0\2\23"+
    "\3\0\16\23\1\144\5\23\15\0\2\23\1\0\2\23"+
    "\3\0\2\23\3\0\13\23\1\145\10\23\15\0\2\23"+
    "\1\0\2\23\3\0\2\23\3\0\17\23\1\146\4\23"+
    "\15\0\2\23\1\0\2\23\3\0\2\23\3\0\6\23"+
    "\1\147\15\23\15\0\2\23\1\0\2\23\3\0\2\23"+
    "\3\0\12\23\1\150\11\23\15\0\2\23\1\0\2\23"+
    "\3\0\2\23\3\0\7\23\1\151\14\23\15\0\2\23"+
    "\1\0\2\23\3\0\2\23\3\0\14\23\1\152\7\23"+
    "\2\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[3588];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\1\1\1\11\2\1\4\11\4\1\3\11"+
    "\1\1\2\11\10\1\2\11\1\1\1\11\6\1\1\0"+
    "\35\1\1\0\11\1\1\11\32\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[106];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
  public _JdlLexer() {
    this((java.io.Reader)null);
  }

  private final IntArrayList myStateStack = new IntArrayList();

  protected void resetInternal() {
    myStateStack.clear();
  }

  private void pushState(int newState) {
    myStateStack.add(yystate());
    yybegin(newState);
  }

  private void popState() {
    if (myStateStack.isEmpty()) return;

    int state = myStateStack.removeInt(myStateStack.size() - 1);
    yybegin(state);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _JdlLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    resetInternal();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { if (myStateStack.isEmpty()) {
      return BAD_CHARACTER;
    }

    yypushback(yylength());
    popState();
            }
          // fall through
          case 34: break;
          case 2:
            { return WHITE_SPACE;
            }
          // fall through
          case 35: break;
          case 3:
            { return NEWLINE;
            }
          // fall through
          case 36: break;
          case 4:
            { return DOUBLE_QUOTED_STRING;
            }
          // fall through
          case 37: break;
          case 5:
            { return LPARENTH;
            }
          // fall through
          case 38: break;
          case 6:
            { return RPARENTH;
            }
          // fall through
          case 39: break;
          case 7:
            { return WILDCARD;
            }
          // fall through
          case 40: break;
          case 8:
            { return COMMA;
            }
          // fall through
          case 41: break;
          case 9:
            { return REGEX_STRING;
            }
          // fall through
          case 42: break;
          case 10:
            { return INTEGER_NUMBER;
            }
          // fall through
          case 43: break;
          case 11:
            { return COLON;
            }
          // fall through
          case 44: break;
          case 12:
            { return ASSIGN;
            }
          // fall through
          case 45: break;
          case 13:
            { return STRUDEL;
            }
          // fall through
          case 46: break;
          case 14:
            { return IDENTIFIER;
            }
          // fall through
          case 47: break;
          case 15:
            { return LBRACKET;
            }
          // fall through
          case 48: break;
          case 16:
            { return RBRACKET;
            }
          // fall through
          case 49: break;
          case 17:
            { pushState(BRACES_BODY); return LBRACE;
            }
          // fall through
          case 50: break;
          case 18:
            { popState(); return RBRACE;
            }
          // fall through
          case 51: break;
          case 19:
            { return DOUBLE_NUMBER;
            }
          // fall through
          case 52: break;
          case 20:
            { return BLOCK_COMMENT;
            }
          // fall through
          case 53: break;
          case 21:
            { return LINE_COMMENT;
            }
          // fall through
          case 54: break;
          case 22:
            { return TO_KEYWORD;
            }
          // fall through
          case 55: break;
          case 23:
            { return FOR_KEYWORD;
            }
          // fall through
          case 56: break;
          case 24:
            { return USE_KEYWORD;
            }
          // fall through
          case 57: break;
          case 25:
            { return ENUM_KEYWORD;
            }
          // fall through
          case 58: break;
          case 26:
            { return TRUE;
            }
          // fall through
          case 59: break;
          case 27:
            { return WITH_KEYWORD;
            }
          // fall through
          case 60: break;
          case 28:
            { return FALSE;
            }
          // fall through
          case 61: break;
          case 29:
            { return ENTITY_KEYWORD;
            }
          // fall through
          case 62: break;
          case 30:
            { return EXCEPT_KEYWORD;
            }
          // fall through
          case 63: break;
          case 31:
            { return DEPLOYMENT_KEYWORD;
            }
          // fall through
          case 64: break;
          case 32:
            { return APPLICATION_KEYWORD;
            }
          // fall through
          case 65: break;
          case 33:
            { return RELATIONSHIP_KEYWORD;
            }
          // fall through
          case 66: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
