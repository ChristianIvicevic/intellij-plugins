// Generated by JFlex 1.9.2 http://jflex.de/  (tweaked for IntelliJ platform)
// source: src/com/intellij/dts/pp/lang/lexer/pp.flex

package com.intellij.dts.pp.lang.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.psi.TokenType;

import com.intellij.dts.pp.lang.PpTokenTypes;


class PpLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int WAITING_BODY = 2;
  public static final int WAITING_HEADER = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2, 2
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\u10ff\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\10\0\1\1\1\2\1\3\2\0\1\4\22\0\1\2"+
    "\1\5\1\6\1\7\1\0\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\30\1\32"+
    "\1\33\1\34\1\17\1\35\1\36\1\37\1\17\1\0"+
    "\1\40\1\41\2\40\1\42\1\43\5\44\1\45\1\44"+
    "\1\46\1\44\1\47\1\44\1\50\2\44\1\51\2\44"+
    "\1\52\1\44\1\53\1\17\1\54\1\17\1\5\1\44"+
    "\1\0\1\40\1\55\1\56\1\57\1\60\1\61\2\44"+
    "\1\62\2\44\1\63\1\44\1\64\1\65\1\47\4\44"+
    "\1\66\2\44\1\67\1\44\1\53\1\70\1\71\1\72"+
    "\1\17\u0181\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[512];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\3\1\1\3\1\4\3\3\1\1"+
    "\5\3\2\5\3\3\4\1\1\3\1\6\1\7\1\6"+
    "\1\7\1\6\4\0\1\10\1\0\2\11\1\4\1\0"+
    "\1\3\1\12\1\0\1\3\1\0\1\13\1\0\1\13"+
    "\1\5\3\0\2\5\1\0\2\5\1\0\1\3\1\14"+
    "\1\0\1\14\1\0\1\14\1\7\2\15\7\0\1\12"+
    "\7\0\2\13\2\0\1\5\1\0\1\13\3\5\1\0"+
    "\1\5\1\0\1\4\1\15\1\10\21\0\1\4\1\15"+
    "\14\0\1\4\1\15\4\0\1\15\2\0\1\16";

  private static int [] zzUnpackAction() {
    int [] result = new int[143];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\73\0\166\0\261\0\354\0\u0127\0\u0162\0\u019d"+
    "\0\u01d8\0\u0213\0\u024e\0\u0289\0\u02c4\0\u02ff\0\261\0\u033a"+
    "\0\u0375\0\u03b0\0\u03eb\0\u0426\0\u0461\0\u049c\0\u04d7\0\u0512"+
    "\0\u054d\0\u0588\0\u05c3\0\u05fe\0\u0639\0\261\0\u0674\0\u0162"+
    "\0\u06af\0\u019d\0\u0127\0\u06ea\0\u0725\0\u0760\0\u079b\0\u019d"+
    "\0\261\0\u07d6\0\261\0\u0811\0\u084c\0\u0887\0\u08c2\0\u08fd"+
    "\0\u0938\0\u0973\0\u09ae\0\u09e9\0\u0a24\0\u0a5f\0\u0a9a\0\u0ad5"+
    "\0\u0b10\0\u0b4b\0\u0b86\0\u0bc1\0\u0bfc\0\u0c37\0\u0c72\0\u054d"+
    "\0\u02ff\0\u05c3\0\u0cad\0\u0588\0\261\0\u06ea\0\u0ce8\0\u0d23"+
    "\0\u0d5e\0\u0d99\0\u0dd4\0\u0e0f\0\u0e4a\0\u0e85\0\261\0\u0ec0"+
    "\0\u0efb\0\u0f36\0\u0f71\0\u0fac\0\u0fe7\0\u1022\0\u105d\0\261"+
    "\0\u1098\0\u10d3\0\u110e\0\u1149\0\u1184\0\261\0\u11bf\0\u11fa"+
    "\0\u1235\0\u1270\0\u12ab\0\u12e6\0\u1321\0\261\0\u135c\0\u1397"+
    "\0\u13d2\0\u140d\0\u1448\0\u1483\0\u14be\0\u14f9\0\u1534\0\u156f"+
    "\0\u15aa\0\u15e5\0\u1620\0\u165b\0\u1696\0\u16d1\0\u170c\0\u1747"+
    "\0\u1782\0\u17bd\0\u17f8\0\u1833\0\u186e\0\u18a9\0\u18e4\0\u191f"+
    "\0\u195a\0\u1995\0\u19d0\0\u1a0b\0\u1a46\0\u1a81\0\u1abc\0\u1af7"+
    "\0\u1b32\0\u1b6d\0\u1ba8\0\u1be3\0\u1c1e\0\u1c59\0\u06ea";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[143];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\2\4\1\5\4\4\1\6\12\4\1\7\31\4\1\10"+
    "\20\4\1\5\2\4\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\2\17\1\11\1\20\1\17\1\21\1\22\1\23"+
    "\1\24\10\25\1\26\1\27\1\11\1\30\5\31\1\32"+
    "\2\31\1\33\1\32\2\31\1\10\11\31\1\34\1\31"+
    "\1\17\1\35\1\17\2\36\1\5\3\36\1\37\13\36"+
    "\1\40\12\36\1\41\16\36\1\42\16\36\75\0\1\5"+
    "\72\0\1\43\35\0\14\44\1\0\5\44\1\45\5\44"+
    "\20\0\1\46\4\0\1\47\52\0\1\50\1\51\1\52"+
    "\124\0\1\17\34\0\3\12\1\0\2\12\1\53\45\12"+
    "\1\54\16\12\7\0\1\17\117\0\1\55\1\0\2\17"+
    "\44\0\1\17\24\0\1\17\34\0\3\56\1\0\6\56"+
    "\1\0\41\56\1\57\16\56\16\0\1\17\17\0\1\17"+
    "\54\0\1\17\15\0\1\17\1\60\50\0\1\17\3\0"+
    "\1\61\1\0\11\62\54\0\1\46\4\0\1\47\13\0"+
    "\1\17\46\0\1\63\6\0\1\64\1\0\7\65\2\66"+
    "\5\0\1\67\1\70\2\0\1\71\3\0\1\72\1\73"+
    "\1\74\1\0\1\67\2\0\1\70\2\0\1\75\2\0"+
    "\1\72\1\73\15\0\1\76\6\0\1\64\1\0\11\25"+
    "\6\0\1\70\2\0\1\71\3\0\1\72\1\0\1\74"+
    "\4\0\1\70\2\0\1\75\2\0\1\72\40\0\1\17"+
    "\2\0\1\17\43\0\1\17\23\0\1\17\1\11\1\77"+
    "\72\0\1\17\1\11\56\0\11\100\4\0\14\100\1\0"+
    "\13\100\11\0\1\12\3\0\1\101\10\0\11\100\4\0"+
    "\10\100\1\102\3\100\1\0\13\100\11\0\1\103\14\0"+
    "\11\100\4\0\14\100\1\0\13\100\11\0\1\12\3\0"+
    "\1\101\10\0\7\100\1\104\1\100\4\0\10\100\1\102"+
    "\3\100\1\0\13\100\41\0\1\17\32\0\1\17\1\0"+
    "\3\37\1\0\2\37\1\105\64\37\3\41\1\0\33\41"+
    "\1\105\33\41\23\0\11\106\4\0\14\106\1\0\13\106"+
    "\26\0\11\106\4\0\14\106\1\0\7\106\1\107\3\106"+
    "\3\0\15\46\1\110\55\46\3\47\2\0\66\47\3\0"+
    "\1\51\67\0\32\12\1\0\13\12\1\111\2\12\1\112"+
    "\13\12\1\113\1\114\1\115\3\12\10\0\1\116\62\0"+
    "\3\56\1\0\6\56\1\117\41\56\1\57\50\56\1\0"+
    "\13\56\1\120\2\56\1\121\13\56\1\122\1\123\1\124"+
    "\3\56\15\0\1\17\76\0\1\17\63\0\1\125\10\0"+
    "\11\62\5\0\1\126\1\70\1\127\1\0\1\130\7\0"+
    "\1\131\2\0\1\70\1\127\1\0\1\130\32\0\7\65"+
    "\2\66\62\0\11\62\5\0\1\126\1\70\1\127\1\0"+
    "\1\130\7\0\1\131\2\0\1\70\1\127\1\0\1\130"+
    "\21\0\1\63\6\0\1\64\1\0\7\65\2\66\6\0"+
    "\1\70\2\0\1\71\3\0\1\72\1\0\1\74\4\0"+
    "\1\70\2\0\1\75\2\0\1\72\16\0\1\132\6\0"+
    "\1\64\1\0\11\66\6\0\1\70\15\0\1\70\35\0"+
    "\2\133\64\0\1\134\1\0\1\134\2\0\11\135\104\0"+
    "\1\74\3\0\1\136\14\0\1\136\51\0\1\137\5\0"+
    "\1\136\7\0\1\140\30\0\1\141\1\0\11\142\4\0"+
    "\4\142\11\0\5\142\62\0\1\136\14\0\1\136\55\0"+
    "\1\136\11\0\1\74\2\0\1\136\27\0\11\25\76\0"+
    "\1\17\33\0\1\143\3\0\7\143\1\144\1\0\37\143"+
    "\1\0\16\143\23\0\11\106\4\0\14\106\1\0\1\106"+
    "\1\145\11\106\3\0\22\46\1\146\50\46\70\0\1\147"+
    "\25\0\11\150\4\0\4\150\11\0\5\150\101\0\1\151"+
    "\25\0\11\152\4\0\4\152\11\0\5\152\6\0\1\153"+
    "\25\0\11\12\4\0\4\12\11\0\5\12\6\0\1\153"+
    "\36\0\1\17\126\0\1\154\25\0\11\155\4\0\4\155"+
    "\11\0\5\155\101\0\1\156\25\0\11\157\4\0\4\157"+
    "\11\0\5\157\6\0\1\160\25\0\11\56\4\0\4\56"+
    "\11\0\5\56\6\0\1\160\25\0\11\62\102\0\1\161"+
    "\53\0\1\162\1\0\1\163\2\0\1\164\122\0\1\161"+
    "\34\0\11\66\51\0\1\67\10\0\2\133\20\0\1\71"+
    "\3\0\1\72\1\0\1\74\7\0\1\75\2\0\1\72"+
    "\27\0\11\135\51\0\1\134\10\0\11\135\5\0\1\126"+
    "\1\0\1\127\1\0\1\130\7\0\1\131\3\0\1\127"+
    "\1\0\1\130\54\0\1\136\110\0\1\136\32\0\11\165"+
    "\4\0\4\165\11\0\5\165\23\0\1\166\6\0\1\167"+
    "\1\0\11\142\4\0\4\142\1\0\1\71\1\0\1\70"+
    "\1\0\1\72\1\0\1\74\1\0\5\142\1\0\1\75"+
    "\2\0\1\72\17\0\1\144\57\0\14\144\1\170\56\144"+
    "\23\0\11\106\4\0\14\106\1\0\6\106\1\171\4\106"+
    "\3\0\3\172\1\0\66\172\24\0\11\173\4\0\4\173"+
    "\11\0\5\173\34\0\7\174\64\0\11\175\4\0\4\175"+
    "\11\0\5\175\34\0\11\176\4\0\4\176\11\0\5\176"+
    "\11\0\3\177\1\0\66\177\24\0\11\200\4\0\4\200"+
    "\11\0\5\200\34\0\7\201\64\0\11\202\4\0\4\202"+
    "\11\0\5\202\34\0\11\203\4\0\4\203\11\0\5\203"+
    "\35\0\1\204\73\0\1\205\3\0\1\130\66\0\1\130"+
    "\74\0\1\130\55\0\1\141\10\0\11\165\4\0\4\165"+
    "\3\0\1\70\5\0\5\165\34\0\11\142\4\0\4\142"+
    "\11\0\5\142\34\0\11\165\4\0\4\165\3\0\1\70"+
    "\5\0\5\165\11\0\1\206\3\0\7\206\2\0\37\206"+
    "\1\0\16\206\23\0\11\106\4\0\14\106\1\0\11\106"+
    "\1\207\1\106\3\0\3\172\1\0\66\172\1\12\23\0"+
    "\11\210\4\0\4\210\11\0\5\210\34\0\7\174\40\0"+
    "\1\12\23\0\11\211\4\0\4\211\11\0\5\211\34\0"+
    "\11\176\4\0\4\176\11\0\5\176\10\0\1\12\3\177"+
    "\1\0\66\177\1\56\23\0\11\212\4\0\4\212\11\0"+
    "\5\212\34\0\7\201\40\0\1\56\23\0\11\213\4\0"+
    "\4\213\11\0\5\213\34\0\11\203\4\0\4\203\11\0"+
    "\5\203\10\0\1\56\31\0\1\130\73\0\1\130\46\0"+
    "\1\53\107\0\11\106\4\0\14\106\1\0\2\106\1\214"+
    "\10\106\26\0\11\215\4\0\4\215\11\0\5\215\34\0"+
    "\11\12\4\0\4\12\11\0\5\12\34\0\11\216\4\0"+
    "\4\216\11\0\5\216\34\0\11\56\4\0\4\56\11\0"+
    "\5\56\34\0\11\106\4\0\14\106\1\0\3\106\1\217"+
    "\7\106\26\0\11\152\4\0\4\152\11\0\5\152\34\0"+
    "\11\157\4\0\4\157\11\0\5\157\11\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[7316];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\12\1\1\11\16\1\1\11\4\1\4\0"+
    "\1\1\1\0\1\11\1\1\1\11\1\0\2\1\1\0"+
    "\1\1\1\0\1\1\1\0\2\1\3\0\2\1\1\0"+
    "\2\1\1\0\2\1\1\0\1\1\1\0\1\1\1\11"+
    "\2\1\7\0\1\11\7\0\1\1\1\11\2\0\1\1"+
    "\1\0\1\1\1\11\2\1\1\0\1\1\1\0\2\1"+
    "\1\11\21\0\2\1\14\0\2\1\4\0\1\1\2\0"+
    "\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[143];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    private final PpTokenTypes tokenTypes;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  PpLexer(java.io.Reader in, PpTokenTypes tokenTypes) {
      this.tokenTypes = tokenTypes;
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return TokenType.BAD_CHARACTER;
            }
          // fall through
          case 15: break;
          case 2:
            { return TokenType.WHITE_SPACE;
            }
          // fall through
          case 16: break;
          case 3:
            { return tokenTypes.getOperatorOrPunctuator();
            }
          // fall through
          case 17: break;
          case 4:
            { return tokenTypes.getStringLiteral();
            }
          // fall through
          case 18: break;
          case 5:
            { return tokenTypes.getIntegerLiteral();
            }
          // fall through
          case 19: break;
          case 6:
            { yybegin(WAITING_BODY); yypushback(1);
            }
          // fall through
          case 20: break;
          case 7:
            { yybegin(WAITING_BODY); return tokenTypes.getHeaderName();
            }
          // fall through
          case 21: break;
          case 8:
            { yybegin(WAITING_BODY); return tokenTypes.getComment();
            }
          // fall through
          case 22: break;
          case 9:
            { return tokenTypes.getLineBreak();
            }
          // fall through
          case 23: break;
          case 10:
            { return tokenTypes.getCharLiteral();
            }
          // fall through
          case 24: break;
          case 11:
            { return tokenTypes.getFloatLiteral();
            }
          // fall through
          case 25: break;
          case 12:
            { return tokenTypes.getIdentifier();
            }
          // fall through
          case 26: break;
          case 13:
            { yybegin(WAITING_BODY); return tokenTypes.getDirective();
            }
          // fall through
          case 27: break;
          case 14:
            { yybegin(WAITING_HEADER); return tokenTypes.getDirective();
            }
          // fall through
          case 28: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
