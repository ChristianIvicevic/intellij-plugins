DtsZephyrBinding(compatible=espressif,esp32-ledc, path=WORKING_DIRECTORY/zephyr/dts/bindings/pwm/espressif,esp32-ledc.yaml, description=
Espressif's LEDC controller Node

The LEDC controller is primarily designed to control the intensity of LEDs, although it can be
used to generate PWM signals for other purposes as well.

The mapping between the channel and GPIO is done through pinctrl

  &ledc0 {
    pinctrl-0 = <&ledc0_default>;
    pinctrl-names = "default";
  }

The 'ledc0_default' node state is defined in <board>-pinctrl.dtsi.

  ledc0_default: ledc0_default {
          group1 {
                  pinmux = <LEDC_CH0_GPIO0>,
                           <LEDC_CH1_GPIO2>,
                           <LEDC_CH2_GPIO4>;
                  output-enable;
          };
  };

If another GPIO mapping is desired, check if <board>-pinctrl.dtsi already have it defined,
otherwise, define the required mapping at your own application folder into a custom
<board>.overlay file.
The 'pinmux' property uses a macro defined in
https://github.com/zephyrproject-rtos/hal_espressif/tree/zephyr/include/dt-bindings/pinctrl
Before including a new node, check if the desired mapping is available according to the SoC.

As an example, the 'ledc0_custom' state below illustrates an alternate mapping using another set
of channels and pins in a custom overlay file.

  &pinctrl {

          ledc0_custom:  ledc0_custom {
                  group1 {
                          pinmux = <LEDC_CH0_GPIO0>,
                                   <LEDC_CH9_GPIO2>,
                                   <LEDC_CH10_GPIO4>;
                          output-enable;
                  };
           };

  };

Use the child bindings to configure the desired channel:

  &ledc0 {
    pinctrl-0 = <&ledc0_custom>;
    pinctrl-names = "default";
    status = "okay";
    #address-cells = <1>;
    #size-cells = <0>;
    channel0@0 {
      reg = <0x0>;
      timer = <0>;
    };
    channel9@9 {
      reg = <0x9>;
      timer = <0>;
    };
    channel10@a {
      reg = <0xa>;
      timer = <1>;
    };
  };

  Note: The channel's 'reg' property defines the ID of the channel. It must match the channel used
    in the 'pinmux'.
, buses=[], onBus=null, properties={status=DtsZephyrPropertyBinding(name=status, description=The status property indicates the operational status of a device. 
The lack of a status property should be treated as if the property 
existed with the value of "okay".
, type=String, default=null, const=null, enum=[String(value=okay), String(value=disabled), String(value=reserved), String(value=fail), String(value=fail-sss)], required=false), compatible=DtsZephyrPropertyBinding(name=compatible, description=The compatible property value consists of one or more strings that 
define the specific programming model for the device. This list of 
strings should be used by a client program for device driver 
selection. The property value consists of a concatenated list of 
null terminated strings, from most specific to most general. They 
allow a device to express its compatibility with a family of similar 
devices, potentially allowing a single device driver to match 
against several devices.

The recommended format is "manufacturer,model", where manufacturer 
is a string describing the name of the manufacturer (such as a stock
ticker symbol), and model specifies the model number.

The compatible string should consist only of lowercase letters, 
digits and dashes, and should start with a letter. A single comma is
typically only used following a vendor prefix. Underscores should 
not be used.

For example:

compatible = "fsl,mpc8641", "ns16550";

In this example, an operating system would first try to locate a 
device driver that supported fsl,mpc8641. If a driver was not found,
it would then try to locate a driver that supported the more general 
ns16550 device type.
, type=StringList, default=null, const=null, enum=null, required=true), phandle=DtsZephyrPropertyBinding(name=phandle, description=The phandle property specifies a numerical identifier for a node 
that is unique within the devicetree. The phandle property value is 
used by other nodes that need to refer to the node associated with 
the property.

Note: Most devicetrees in DTS will not contain explicit phandle 
properties.The DTC tool automatically inserts the phandle properties
when the DTS is compiled into the binary DTB format.

For example see the following devicetree excerpt:

pic@10000000 {
    phandle = <1>; interrupt-controller;
    reg = <0x10000000 0x100>;
};

A phandle value of 1 is defined. Another device node could reference 
the pic node with a phandle value of 1:

another-device-node { 
    interrupt-parent = <1>; 
};
, type=PHandle, default=null, const=null, enum=null, required=false), ranges=DtsZephyrPropertyBinding(name=ranges, description=!!html
The ranges property provides a means of defining a mapping or 
translation between the address space of the bus (the child address 
space) and the address space of the bus node's parent (the parent 
address space).
<br/><br/>
The format of the value of the ranges property is an arbitrary 
number of triplets of (child-bus-address, parent- bus-address, 
length).

<ul>
    <li>
    The child-bus-address is a physical address within the child bus' 
    address space. The number of cells to represent the address is 
    bus dependent and can be determined from the #address-cells of 
    this node (the node in which the ranges property appears).
    </li>
    <li>
    The parent-bus-address is a physical address within the parent 
    bus' address space. The number of cells to represent the parent 
    address is bus dependent and can be determined from the 
    #address-cells property of the node that defines the parent's 
    address space.
    </li>
    <li>
    The length specifies the size of the range in the child's 
    address space. The number of cells to represent the size can be 
    determined from the #size-cells of this node (the node in which 
    the ranges property appears).
    </li>
</ul>

If the property is defined with an empty value, it specifies that 
the parent and child address space is identical, and no address 
translation is required.
<br/><br/>
If the property is not present in a bus node, it is assumed that no 
mapping exists between children of the node and the parent address 
space.
, type=Ints, default=null, const=null, enum=null, required=false), device_type=DtsZephyrPropertyBinding(name=device_type, description=The device_type property was used in IEEE 1275 to describe the 
device's FCode programming model. Because DTSpec does not have 
FCode, new use of the property is deprecated, and it should be 
included only on cpu and memory nodes for compatibility with IEEE 
1275-derived devicetrees.
, type=String, default=null, const=null, enum=null, required=false), interrupts-extended=DtsZephyrPropertyBinding(name=interrupts-extended, description=The interrupts-extended property lists the interrupt(s) generated by
a device. interrupts-extended should be used instead of interrupts 
when a device is connected to multiple interrupt controllers as it 
encodes a parent phandle with each interrupt specifier.
, type=Compound, default=null, const=null, enum=null, required=false), interrupt-parent=DtsZephyrPropertyBinding(name=interrupt-parent, description=Because the hierarchy of the nodes in the interrupt tree might not 
match the devicetree, the interrupt-parent property is available to 
make the definition of an interrupt parent explicit. The value is 
the phandle to the interrupt parent. If this property is missing 
from a device, its interrupt parent is assumed to be its devicetree 
parent.
, type=PHandle, default=null, const=null, enum=null, required=false), #pwm-cells=DtsZephyrPropertyBinding(name=#pwm-cells, description=Number of items to expect in a pwm specifier, type=Int, default=null, const=Int(value=3), enum=null, required=true), reg=DtsZephyrPropertyBinding(name=reg, description=register space, type=Ints, default=null, const=null, enum=null, required=false), reg-names=DtsZephyrPropertyBinding(name=reg-names, description=name of each register space, type=StringList, default=null, const=null, enum=null, required=false), interrupts=DtsZephyrPropertyBinding(name=interrupts, description=interrupts for device, type=Ints, default=null, const=null, enum=null, required=false), interrupt-names=DtsZephyrPropertyBinding(name=interrupt-names, description=name of each interrupt, type=StringList, default=null, const=null, enum=null, required=false), label=DtsZephyrPropertyBinding(name=label, description=Human readable string describing the device (used as device_get_binding() argument)
, type=String, default=null, const=null, enum=null, required=false), clocks=DtsZephyrPropertyBinding(name=clocks, description=Clock gate information, type=PHandleList, default=null, const=null, enum=null, required=false), clock-names=DtsZephyrPropertyBinding(name=clock-names, description=name of each clock, type=StringList, default=null, const=null, enum=null, required=false), #address-cells=DtsZephyrPropertyBinding(name=#address-cells, description=number of address cells in reg property, type=Int, default=null, const=null, enum=null, required=false), #size-cells=DtsZephyrPropertyBinding(name=#size-cells, description=number of size cells in reg property, type=Int, default=null, const=null, enum=null, required=false), dmas=DtsZephyrPropertyBinding(name=dmas, description=DMA channels specifiers, type=PHandleList, default=null, const=null, enum=null, required=false), dma-names=DtsZephyrPropertyBinding(name=dma-names, description=Provided names of DMA channel specifiers, type=StringList, default=null, const=null, enum=null, required=false), io-channels=DtsZephyrPropertyBinding(name=io-channels, description=IO channels specifiers, type=PHandleList, default=null, const=null, enum=null, required=false), io-channel-names=DtsZephyrPropertyBinding(name=io-channel-names, description=Provided names of IO channel specifiers, type=StringList, default=null, const=null, enum=null, required=false), mboxes=DtsZephyrPropertyBinding(name=mboxes, description=mailbox / IPM channels specifiers, type=PHandleList, default=null, const=null, enum=null, required=false), mbox-names=DtsZephyrPropertyBinding(name=mbox-names, description=Provided names of mailbox / IPM channel specifiers, type=StringList, default=null, const=null, enum=null, required=false), wakeup-source=DtsZephyrPropertyBinding(name=wakeup-source, description=Property to identify that a device can be used as wake up source.

When this property is provided a specific flag is set into the
device that tells the system that the device is capable of
wake up the system.

Wake up capable devices are disabled (interruptions will not wake up
the system) by default but they can be enabled at runtime if necessary.
, type=Boolean, default=null, const=null, enum=null, required=false), power-domain=DtsZephyrPropertyBinding(name=power-domain, description=
Power domain the device belongs to.

The device will be notified when the power domain it belongs to is either
suspended or resumed.
, type=PHandle, default=null, const=null, enum=null, required=false), zephyr,pm-device-runtime-auto=DtsZephyrPropertyBinding(name=zephyr,pm-device-runtime-auto, description=Automatically configure the device for runtime power management after the
init function runs.
, type=Boolean, default=null, const=null, enum=null, required=false), pinctrl-0=DtsZephyrPropertyBinding(name=pinctrl-0, description=Pin configuration/s for the first state. Content is specific to the
selected pin controller driver implementation.
, type=PHandles, default=null, const=null, enum=null, required=false), pinctrl-1=DtsZephyrPropertyBinding(name=pinctrl-1, description=Pin configuration/s for the second state. See pinctrl-0.
, type=PHandles, default=null, const=null, enum=null, required=false), pinctrl-2=DtsZephyrPropertyBinding(name=pinctrl-2, description=Pin configuration/s for the third state. See pinctrl-0.
, type=PHandles, default=null, const=null, enum=null, required=false), pinctrl-3=DtsZephyrPropertyBinding(name=pinctrl-3, description=Pin configuration/s for the fourth state. See pinctrl-0.
, type=PHandles, default=null, const=null, enum=null, required=false), pinctrl-4=DtsZephyrPropertyBinding(name=pinctrl-4, description=Pin configuration/s for the fifth state. See pinctrl-0.
, type=PHandles, default=null, const=null, enum=null, required=false), pinctrl-names=DtsZephyrPropertyBinding(name=pinctrl-names, description=Names for the provided states. The number of names needs to match the
number of states.
, type=StringList, default=null, const=null, enum=null, required=false)}, child=DtsZephyrBinding(compatible=espressif,esp32-ledc, path=null, description=Channel configuration., buses=[], onBus=null, properties={status=DtsZephyrPropertyBinding(name=status, description=The status property indicates the operational status of a device. 
The lack of a status property should be treated as if the property 
existed with the value of "okay".
, type=String, default=null, const=null, enum=[String(value=okay), String(value=disabled), String(value=reserved), String(value=fail), String(value=fail-sss)], required=false), compatible=DtsZephyrPropertyBinding(name=compatible, description=The compatible property value consists of one or more strings that 
define the specific programming model for the device. This list of 
strings should be used by a client program for device driver 
selection. The property value consists of a concatenated list of 
null terminated strings, from most specific to most general. They 
allow a device to express its compatibility with a family of similar 
devices, potentially allowing a single device driver to match 
against several devices.

The recommended format is "manufacturer,model", where manufacturer 
is a string describing the name of the manufacturer (such as a stock
ticker symbol), and model specifies the model number.

The compatible string should consist only of lowercase letters, 
digits and dashes, and should start with a letter. A single comma is
typically only used following a vendor prefix. Underscores should 
not be used.

For example:

compatible = "fsl,mpc8641", "ns16550";

In this example, an operating system would first try to locate a 
device driver that supported fsl,mpc8641. If a driver was not found,
it would then try to locate a driver that supported the more general 
ns16550 device type.
, type=StringList, default=null, const=null, enum=null, required=false), phandle=DtsZephyrPropertyBinding(name=phandle, description=The phandle property specifies a numerical identifier for a node 
that is unique within the devicetree. The phandle property value is 
used by other nodes that need to refer to the node associated with 
the property.

Note: Most devicetrees in DTS will not contain explicit phandle 
properties.The DTC tool automatically inserts the phandle properties
when the DTS is compiled into the binary DTB format.

For example see the following devicetree excerpt:

pic@10000000 {
    phandle = <1>; interrupt-controller;
    reg = <0x10000000 0x100>;
};

A phandle value of 1 is defined. Another device node could reference 
the pic node with a phandle value of 1:

another-device-node { 
    interrupt-parent = <1>; 
};
, type=PHandle, default=null, const=null, enum=null, required=false), ranges=DtsZephyrPropertyBinding(name=ranges, description=!!html
The ranges property provides a means of defining a mapping or 
translation between the address space of the bus (the child address 
space) and the address space of the bus node's parent (the parent 
address space).
<br/><br/>
The format of the value of the ranges property is an arbitrary 
number of triplets of (child-bus-address, parent- bus-address, 
length).

<ul>
    <li>
    The child-bus-address is a physical address within the child bus' 
    address space. The number of cells to represent the address is 
    bus dependent and can be determined from the #address-cells of 
    this node (the node in which the ranges property appears).
    </li>
    <li>
    The parent-bus-address is a physical address within the parent 
    bus' address space. The number of cells to represent the parent 
    address is bus dependent and can be determined from the 
    #address-cells property of the node that defines the parent's 
    address space.
    </li>
    <li>
    The length specifies the size of the range in the child's 
    address space. The number of cells to represent the size can be 
    determined from the #size-cells of this node (the node in which 
    the ranges property appears).
    </li>
</ul>

If the property is defined with an empty value, it specifies that 
the parent and child address space is identical, and no address 
translation is required.
<br/><br/>
If the property is not present in a bus node, it is assumed that no 
mapping exists between children of the node and the parent address 
space.
, type=Ints, default=null, const=null, enum=null, required=false), device_type=DtsZephyrPropertyBinding(name=device_type, description=The device_type property was used in IEEE 1275 to describe the 
device's FCode programming model. Because DTSpec does not have 
FCode, new use of the property is deprecated, and it should be 
included only on cpu and memory nodes for compatibility with IEEE 
1275-derived devicetrees.
, type=String, default=null, const=null, enum=null, required=false), interrupts-extended=DtsZephyrPropertyBinding(name=interrupts-extended, description=The interrupts-extended property lists the interrupt(s) generated by
a device. interrupts-extended should be used instead of interrupts 
when a device is connected to multiple interrupt controllers as it 
encodes a parent phandle with each interrupt specifier.
, type=Compound, default=null, const=null, enum=null, required=false), interrupt-parent=DtsZephyrPropertyBinding(name=interrupt-parent, description=Because the hierarchy of the nodes in the interrupt tree might not 
match the devicetree, the interrupt-parent property is available to 
make the definition of an interrupt parent explicit. The value is 
the phandle to the interrupt parent. If this property is missing 
from a device, its interrupt parent is assumed to be its devicetree 
parent.
, type=PHandle, default=null, const=null, enum=null, required=false), reg=DtsZephyrPropertyBinding(name=reg, description=The ESP32 has 8 low speed channel and 8 high speed channels.
The low speed channel are mapped from channel 0 to 7, and the high speed are mapped from
channel 8 to 15.

High speed channels are only available in the ESP32 SoC. ESP32S2 and ESP32S3 have 8
available channels, and ESP32C3 has 6. In these SoCs there is no differentiation between
low or high speed.
, type=Int, default=null, const=null, enum=[Int(value=0), Int(value=1), Int(value=2), Int(value=3), Int(value=4), Int(value=5), Int(value=6), Int(value=7), Int(value=8), Int(value=9), Int(value=10), Int(value=11), Int(value=12), Int(value=13), Int(value=14), Int(value=15)], required=true), timer=DtsZephyrPropertyBinding(name=timer, description=Timer selection.
For maximum flexibility, the high-speed as well as the low-speed channels can be driven from
one of four high-speed/low-speed timers.
, type=Int, default=null, const=null, enum=[Int(value=0), Int(value=1), Int(value=2), Int(value=3)], required=true)}, child=null, isChild=true, allowUndeclaredProperties=false), isChild=false, allowUndeclaredProperties=false)