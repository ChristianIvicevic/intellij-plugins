/* The following code was generated by JFlex 1.7.0-1 tweaked for IntelliJ platform */

package com.intellij.dts.lang.lexer;

import java.util.Stack;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.psi.TokenType;

import com.intellij.dts.lang.psi.DtsTypes;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-1
 * from the specification file <tt>/Users/Daniel.Brauner/Projects/intellij/master/contrib/dts/src/com/intellij/dts/lang/lexer/dts.flex</tt>
 */
class DtsLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int WAITING_CELL = 2;
  public static final int WAITING_BYTE = 4;
  public static final int WAITING_VALUE = 6;
  public static final int WAITING_BITS = 8;
  public static final int WAITING_EXPR = 10;
  public static final int WAITING_STRING = 12;
  public static final int WAITING_CHAR = 14;
  public static final int WAITING_HANDLE = 16;
  public static final int WAITING_INCLUDE = 18;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9, 9
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [9, 6, 6]
   * Total runtime size is 1568 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>12]|((ch>>6)&0x3f)]<<6)|(ch&0x3f)];
  }

  /* The ZZ_CMAP_Z table has 272 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\100\1\200\u010d\100");

  /* The ZZ_CMAP_Y table has 192 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\175\3\1\4\77\3");

  /* The ZZ_CMAP_A table has 320 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\4\1\1\2\27\1\2\22\0\1\4\1\74\1\26\1\35\1\0\1\70\1\55\1\30\1\60\1\61"+
    "\1\34\1\67\1\54\1\40\1\15\1\16\1\22\1\42\6\32\1\33\1\20\1\66\1\51\1\64\1\52"+
    "\1\65\1\75\1\15\6\21\5\17\1\25\10\17\1\24\2\17\1\23\2\17\1\62\1\3\1\63\1\72"+
    "\1\17\1\0\1\21\1\53\1\7\1\12\1\13\1\14\1\44\1\17\1\5\2\17\1\10\1\45\1\6\1"+
    "\47\1\43\1\17\1\46\1\37\1\36\1\11\1\41\1\17\1\31\1\50\1\17\1\56\1\71\1\57"+
    "\1\73\6\0\1\27\242\0\2\27\26\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\12\0\1\1\1\2\1\3\1\4\1\5\1\3\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\3\2\1\2\21\1\22\1\1\1\23"+
    "\1\24\1\3\1\1\1\25\1\26\2\27\1\1\1\3"+
    "\1\30\2\21\1\31\1\32\1\1\1\26\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\3\50\1\51\1\50\4\52\1\53"+
    "\1\52\2\54\1\55\1\56\1\54\1\57\1\60\2\0"+
    "\1\61\6\0\4\3\1\0\2\21\5\0\2\62\2\27"+
    "\5\0\2\21\1\0\1\63\1\64\1\65\1\66\1\67"+
    "\1\70\1\71\1\72\2\50\1\61\10\50\1\52\1\0"+
    "\7\56\10\0\5\3\2\21\5\0\2\27\5\0\2\21"+
    "\3\50\1\61\12\50\2\52\11\56\3\0\1\73\4\0"+
    "\4\3\10\0\3\50\1\73\7\50\3\56\1\73\3\56"+
    "\7\0\3\3\6\0\11\50\6\56\6\0\1\74\1\3"+
    "\1\75\1\3\4\0\7\50\1\75\1\50\6\56\6\0"+
    "\1\75\6\50\1\75\6\56\2\0\1\76\1\77\2\0"+
    "\1\75\2\50\1\76\1\77\2\50\2\75\2\56\1\76"+
    "\1\77\2\56\1\100\4\0\1\100\4\50\1\100\4\56"+
    "\4\0\4\50\4\56\4\0\4\50\4\56\2\0\1\101"+
    "\1\0\2\50\1\101\1\50\2\56\1\101\1\56\1\102"+
    "\2\0\1\102\2\50\1\102\2\56\2\0\2\50\2\56"+
    "\2\0\2\50\2\56\1\0\1\103\1\50\1\103\1\56"+
    "\1\103\3\104";

  private static int [] zzUnpackAction() {
    int [] result = new int[417];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\76\0\174\0\272\0\370\0\u0136\0\u0174\0\u01b2"+
    "\0\u01f0\0\u022e\0\u026c\0\u02aa\0\u02e8\0\u0326\0\u026c\0\u0364"+
    "\0\u026c\0\u026c\0\u026c\0\u026c\0\u026c\0\u026c\0\u026c\0\u026c"+
    "\0\u026c\0\u026c\0\u026c\0\u03a2\0\u03e0\0\u041e\0\u045c\0\u049a"+
    "\0\u026c\0\u04d8\0\u026c\0\u026c\0\u0516\0\u0554\0\u026c\0\u03e0"+
    "\0\u0592\0\u05d0\0\u060e\0\u064c\0\u041e\0\u068a\0\u06c8\0\u026c"+
    "\0\u026c\0\u0706\0\u026c\0\u0744\0\u026c\0\u026c\0\u0782\0\u07c0"+
    "\0\u026c\0\u026c\0\u026c\0\u07fe\0\u026c\0\u026c\0\u083c\0\u026c"+
    "\0\u087a\0\u08b8\0\u08f6\0\u026c\0\u0934\0\u026c\0\u02aa\0\u0972"+
    "\0\u041e\0\u026c\0\u060e\0\u026c\0\u02aa\0\u09b0\0\u09ee\0\u060e"+
    "\0\u026c\0\u026c\0\u0a2c\0\u0a6a\0\u0aa8\0\u0ae6\0\u0b24\0\u0b62"+
    "\0\u0ba0\0\u0bde\0\u060e\0\u0c1c\0\u0c5a\0\u0c98\0\u0cd6\0\u03e0"+
    "\0\u0d14\0\u0d52\0\u0d90\0\u0dce\0\u0e0c\0\u0e4a\0\u0e88\0\u03a2"+
    "\0\u03e0\0\u0ec6\0\u0f04\0\u0f42\0\u0f80\0\u0fbe\0\u0ffc\0\u103a"+
    "\0\u1078\0\u10b6\0\u10f4\0\u026c\0\u026c\0\u026c\0\u026c\0\u026c"+
    "\0\u026c\0\u026c\0\u026c\0\u1132\0\u1170\0\u11ae\0\u11ec\0\u122a"+
    "\0\u1268\0\u12a6\0\u12e4\0\u1322\0\u1360\0\u139e\0\u13dc\0\u141a"+
    "\0\u1458\0\u1496\0\u14d4\0\u1512\0\u1550\0\u158e\0\u15cc\0\u160a"+
    "\0\u1648\0\u1686\0\u16c4\0\u1702\0\u1740\0\u177e\0\u17bc\0\u17fa"+
    "\0\u1838\0\u1876\0\u18b4\0\u18f2\0\u03e0\0\u1930\0\u196e\0\u19ac"+
    "\0\u19ea\0\u1a28\0\u1a66\0\u026c\0\u1aa4\0\u1ae2\0\u1b20\0\u1b5e"+
    "\0\u1b9c\0\u1bda\0\u026c\0\u1c18\0\u1c56\0\u1c94\0\u1cd2\0\u1d10"+
    "\0\u1d4e\0\u1d8c\0\u1dca\0\u1e08\0\u1e46\0\u1e84\0\u1ec2\0\u1f00"+
    "\0\u1f3e\0\u1f7c\0\u1fba\0\u1ff8\0\u2036\0\u2074\0\u20b2\0\u20f0"+
    "\0\u212e\0\u216c\0\u21aa\0\u21e8\0\u2226\0\u2264\0\u22a2\0\u22e0"+
    "\0\u026c\0\u231e\0\u235c\0\u239a\0\u23d8\0\u2416\0\u2454\0\u2492"+
    "\0\u24d0\0\u250e\0\u254c\0\u258a\0\u25c8\0\u2606\0\u2644\0\u2682"+
    "\0\u26c0\0\u26fe\0\u273c\0\u277a\0\u087a\0\u27b8\0\u27f6\0\u2834"+
    "\0\u2872\0\u28b0\0\u28ee\0\u292c\0\u296a\0\u29a8\0\u29e6\0\u2074"+
    "\0\u2a24\0\u2a62\0\u2aa0\0\u2ade\0\u2b1c\0\u2b5a\0\u2b98\0\u2bd6"+
    "\0\u2c14\0\u2c52\0\u2c90\0\u2cce\0\u2d0c\0\u2d4a\0\u2d88\0\u2dc6"+
    "\0\u2e04\0\u2e42\0\u2e80\0\u2ebe\0\u2efc\0\u2f3a\0\u2f78\0\u2fb6"+
    "\0\u2ff4\0\u3032\0\u3070\0\u30ae\0\u30ec\0\u312a\0\u3168\0\u31a6"+
    "\0\u31e4\0\u3222\0\u3260\0\u329e\0\u32dc\0\u331a\0\u3358\0\u3396"+
    "\0\u026c\0\u33d4\0\u3412\0\u3450\0\u348e\0\u34cc\0\u350a\0\u3548"+
    "\0\u3586\0\u35c4\0\u3602\0\u3640\0\u367e\0\u36bc\0\u36fa\0\u3738"+
    "\0\u3776\0\u37b4\0\u37f2\0\u3830\0\u386e\0\u38ac\0\u38ea\0\u3928"+
    "\0\u3966\0\u39a4\0\u39e2\0\u3a20\0\u3a5e\0\u3a9c\0\u3ada\0\u3b18"+
    "\0\u3b56\0\u3b94\0\u3bd2\0\u3c10\0\u3c4e\0\u3c8c\0\u3cca\0\u3d08"+
    "\0\u3d46\0\u3d84\0\u3dc2\0\u3e00\0\u3e3e\0\u026c\0\u026c\0\u3e7c"+
    "\0\u3eba\0\u3ef8\0\u3f36\0\u3f74\0\u087a\0\u087a\0\u3fb2\0\u3ff0"+
    "\0\u402e\0\u406c\0\u40aa\0\u40e8\0\u2074\0\u2074\0\u4126\0\u4164"+
    "\0\u026c\0\u41a2\0\u41e0\0\u421e\0\u425c\0\u087a\0\u429a\0\u42d8"+
    "\0\u4316\0\u4354\0\u2074\0\u4392\0\u43d0\0\u440e\0\u444c\0\u448a"+
    "\0\u44c8\0\u4506\0\u4544\0\u4582\0\u45c0\0\u45fe\0\u463c\0\u467a"+
    "\0\u46b8\0\u46f6\0\u4734\0\u4772\0\u47b0\0\u47ee\0\u482c\0\u486a"+
    "\0\u48a8\0\u48e6\0\u4924\0\u4962\0\u49a0\0\u49de\0\u4a1c\0\u4a5a"+
    "\0\u4a98\0\u026c\0\u4ad6\0\u4b14\0\u4b52\0\u087a\0\u4b90\0\u4bce"+
    "\0\u4c0c\0\u2074\0\u4c4a\0\u026c\0\u4c88\0\u4cc6\0\u087a\0\u4d04"+
    "\0\u4d42\0\u2074\0\u4d80\0\u4dbe\0\u4dfc\0\u4e3a\0\u4e78\0\u4eb6"+
    "\0\u4ef4\0\u4f32\0\u4f70\0\u4fae\0\u4fec\0\u502a\0\u5068\0\u50a6"+
    "\0\u50e4\0\u026c\0\u5122\0\u087a\0\u5160\0\u2074\0\u026c\0\u087a"+
    "\0\u2074";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[417];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\13\2\14\1\13\1\14\11\15\1\16\7\15\1\17"+
    "\2\13\4\15\1\20\13\15\1\21\1\22\2\15\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\13\1\15\5\13\1\15\1\13\2\14\1\13\1\14"+
    "\10\34\1\35\1\36\1\34\1\37\1\34\1\40\3\34"+
    "\2\13\1\41\1\34\2\37\1\35\1\42\2\34\1\35"+
    "\1\34\1\37\6\34\2\13\1\34\1\35\1\23\2\13"+
    "\1\43\4\13\1\44\1\13\1\35\5\13\1\35\1\13"+
    "\2\14\1\13\1\14\2\34\1\45\2\34\3\45\1\35"+
    "\1\36\1\34\1\46\1\45\1\46\3\34\3\13\1\34"+
    "\2\46\1\35\1\42\2\34\1\35\1\34\1\46\6\34"+
    "\2\13\1\45\1\35\6\13\1\47\3\13\1\35\5\13"+
    "\1\35\1\13\2\14\1\13\1\14\10\34\1\35\1\16"+
    "\1\34\1\35\1\34\1\35\3\34\1\17\2\13\1\34"+
    "\3\35\1\42\2\34\1\35\1\34\1\35\6\34\2\13"+
    "\1\34\1\50\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\13\1\35\5\13\1\35\1\13"+
    "\2\14\1\13\1\14\11\13\1\36\1\13\1\51\1\13"+
    "\1\52\7\13\2\51\1\13\1\53\4\13\1\51\34\13"+
    "\2\14\1\13\1\14\10\54\1\13\1\55\1\54\1\56"+
    "\1\54\1\57\3\54\2\13\1\41\1\54\2\56\1\60"+
    "\1\53\2\54\1\61\1\54\1\56\6\54\1\13\1\62"+
    "\1\54\1\63\1\64\2\13\1\65\1\66\2\13\1\67"+
    "\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\77"+
    "\1\100\3\101\1\102\12\101\1\103\7\101\1\104\6\101"+
    "\1\105\40\101\1\106\2\107\1\110\1\107\11\106\1\111"+
    "\11\106\1\112\4\106\1\113\40\106\1\114\2\115\1\114"+
    "\1\14\10\116\1\114\1\117\1\116\1\114\1\116\1\114"+
    "\3\116\3\114\1\116\3\114\1\120\2\116\1\114\1\116"+
    "\1\114\6\116\2\114\1\116\2\114\1\24\1\121\16\114"+
    "\1\13\2\14\1\13\1\14\11\13\1\36\7\13\1\17"+
    "\6\13\1\53\40\13\77\0\2\14\1\0\1\14\76\0"+
    "\11\15\1\0\7\15\3\0\20\15\2\0\2\15\11\0"+
    "\1\122\1\15\5\0\1\15\5\0\1\123\4\0\1\124"+
    "\3\0\1\125\15\0\1\126\6\0\1\127\1\0\1\130"+
    "\1\0\1\131\3\0\1\132\26\0\1\133\1\134\3\15"+
    "\1\135\1\136\1\137\2\15\1\0\7\15\3\0\20\15"+
    "\2\0\2\15\11\0\1\122\1\15\5\0\1\15\5\0"+
    "\10\34\1\140\1\0\7\34\3\0\3\34\2\140\2\34"+
    "\1\140\10\34\2\0\1\34\1\140\11\0\1\122\1\140"+
    "\5\0\1\140\5\0\11\140\1\0\7\140\3\0\20\140"+
    "\2\0\2\140\11\0\1\122\1\140\5\0\1\140\5\0"+
    "\1\123\4\0\1\124\3\0\1\125\15\0\1\126\6\0"+
    "\1\127\1\0\1\130\1\0\1\131\33\0\11\140\1\0"+
    "\1\140\1\37\1\140\1\37\1\140\1\141\1\142\3\0"+
    "\1\140\2\37\6\140\1\37\6\140\2\0\2\140\11\0"+
    "\1\122\1\140\5\0\1\140\5\0\11\140\1\0\1\140"+
    "\1\37\1\140\1\37\1\143\1\141\1\142\3\0\1\143"+
    "\2\37\6\140\1\37\6\140\2\0\2\140\11\0\1\122"+
    "\1\140\5\0\1\140\4\0\1\133\1\144\3\140\1\145"+
    "\1\146\1\147\2\140\1\0\7\140\3\0\20\140\2\0"+
    "\2\140\11\0\1\122\1\140\5\0\1\140\5\0\2\34"+
    "\1\150\2\34\3\150\1\140\1\0\1\34\3\150\3\34"+
    "\3\0\1\34\2\150\2\140\2\34\1\140\1\34\1\150"+
    "\6\34\2\0\1\150\1\140\11\0\1\122\1\140\5\0"+
    "\1\140\5\0\2\140\1\151\2\140\3\151\1\140\1\0"+
    "\1\140\3\151\3\140\3\0\1\140\2\151\6\140\1\151"+
    "\6\140\2\0\1\151\1\140\11\0\1\122\1\140\5\0"+
    "\1\140\20\0\1\51\1\0\1\51\1\0\1\152\1\153"+
    "\4\0\2\51\6\0\1\51\53\0\1\51\1\0\1\51"+
    "\1\154\1\152\1\153\3\0\1\154\2\51\6\0\1\51"+
    "\37\0\1\133\1\155\3\0\1\156\1\157\1\160\67\0"+
    "\10\54\2\0\7\54\3\0\3\54\2\0\2\54\1\0"+
    "\10\54\2\0\1\54\42\0\1\56\1\0\1\56\1\0"+
    "\1\161\1\162\4\0\2\56\6\0\1\56\53\0\1\56"+
    "\1\0\1\56\1\163\1\161\1\162\3\0\1\163\2\56"+
    "\6\0\1\56\105\0\1\164\100\0\1\165\72\0\1\166"+
    "\11\0\1\167\63\0\1\170\12\0\1\171\101\0\1\172"+
    "\56\0\1\173\23\0\3\101\1\102\22\101\1\0\52\101"+
    "\1\102\75\101\1\102\1\101\1\174\4\101\1\175\3\101"+
    "\1\176\7\101\1\0\5\101\1\177\6\101\1\200\1\101"+
    "\1\201\1\101\1\202\31\101\1\102\1\105\1\203\3\101"+
    "\1\204\1\205\1\206\12\101\1\0\47\101\22\106\1\207"+
    "\6\106\1\210\1\207\7\106\1\207\33\106\5\0\10\116"+
    "\2\0\7\116\3\0\3\116\2\0\2\116\1\0\10\116"+
    "\2\0\1\116\27\0\1\211\4\212\1\213\3\212\1\125"+
    "\7\212\3\0\3\212\1\214\6\212\1\215\1\212\1\216"+
    "\1\212\1\217\1\212\2\0\2\212\12\0\1\212\5\0"+
    "\1\212\6\0\1\220\102\0\1\221\22\0\1\222\37\0"+
    "\1\125\2\0\73\125\34\126\1\223\41\126\10\0\1\224"+
    "\100\0\1\225\127\0\1\226\35\0\1\227\75\0\1\15"+
    "\1\230\5\15\1\231\1\15\1\0\7\15\3\0\20\15"+
    "\2\0\2\15\11\0\1\122\1\15\5\0\1\15\5\0"+
    "\1\15\1\232\7\15\1\0\7\15\3\0\20\15\2\0"+
    "\2\15\11\0\1\122\1\15\5\0\1\15\5\0\6\15"+
    "\1\233\2\15\1\0\7\15\3\0\20\15\2\0\2\15"+
    "\11\0\1\122\1\15\5\0\1\15\5\0\1\15\1\234"+
    "\7\15\1\0\7\15\3\0\20\15\2\0\2\15\11\0"+
    "\1\122\1\15\5\0\1\15\5\0\11\140\1\0\6\140"+
    "\1\142\3\0\20\140\2\0\2\140\11\0\1\122\1\140"+
    "\5\0\1\140\5\0\11\140\1\0\6\140\1\235\3\0"+
    "\20\140\2\0\2\140\11\0\1\122\1\140\5\0\1\140"+
    "\5\0\2\140\1\236\2\140\3\236\1\140\1\0\1\140"+
    "\3\236\3\140\3\0\1\140\2\236\6\140\1\236\6\140"+
    "\2\0\1\236\1\140\11\0\1\122\1\140\5\0\1\140"+
    "\5\0\1\140\1\237\5\140\1\240\1\140\1\0\7\140"+
    "\3\0\20\140\2\0\2\140\11\0\1\122\1\140\5\0"+
    "\1\140\5\0\1\140\1\241\7\140\1\0\7\140\3\0"+
    "\20\140\2\0\2\140\11\0\1\122\1\140\5\0\1\140"+
    "\5\0\6\140\1\242\2\140\1\0\7\140\3\0\20\140"+
    "\2\0\2\140\11\0\1\122\1\140\5\0\1\140\5\0"+
    "\1\140\1\243\7\140\1\0\7\140\3\0\20\140\2\0"+
    "\2\140\11\0\1\122\1\140\5\0\1\140\25\0\1\153"+
    "\75\0\1\244\57\0\1\245\2\0\3\245\3\0\3\245"+
    "\7\0\2\245\6\0\1\245\10\0\1\245\30\0\1\246"+
    "\5\0\1\247\67\0\1\250\102\0\1\251\70\0\1\252"+
    "\114\0\1\162\75\0\1\253\57\0\1\254\2\0\3\254"+
    "\3\0\3\254\7\0\2\254\6\0\1\254\10\0\1\254"+
    "\22\0\3\101\1\102\2\101\1\255\17\101\1\0\52\101"+
    "\1\102\7\101\1\256\12\101\1\0\7\101\1\257\37\101"+
    "\1\176\2\101\1\260\22\176\1\125\47\176\3\177\1\261"+
    "\22\177\1\126\5\177\1\262\41\177\3\101\1\102\4\101"+
    "\1\263\15\101\1\0\52\101\1\102\7\101\1\264\12\101"+
    "\1\0\52\101\1\102\22\101\1\0\16\101\1\265\33\101"+
    "\1\102\2\101\1\266\5\101\1\267\11\101\1\0\52\101"+
    "\1\102\2\101\1\270\17\101\1\0\52\101\1\102\7\101"+
    "\1\271\12\101\1\0\52\101\1\102\2\101\1\272\17\101"+
    "\1\0\47\101\22\0\1\273\7\0\2\273\6\0\1\273"+
    "\42\0\1\274\2\0\3\274\3\0\3\274\7\0\2\274"+
    "\6\0\1\274\10\0\1\274\27\0\1\212\1\275\7\212"+
    "\1\276\7\212\3\0\20\212\2\0\2\212\12\0\1\212"+
    "\5\0\1\212\5\0\11\212\1\276\7\212\3\0\20\212"+
    "\2\0\2\212\12\0\1\212\5\0\1\212\5\0\6\212"+
    "\1\277\2\212\1\276\7\212\3\0\5\212\1\300\12\212"+
    "\2\0\2\212\12\0\1\212\5\0\1\212\5\126\11\214"+
    "\1\301\7\214\3\126\3\214\1\302\14\214\2\126\2\214"+
    "\12\126\1\214\5\126\1\214\5\0\3\212\1\303\5\212"+
    "\1\276\7\212\3\0\20\212\2\0\2\212\12\0\1\212"+
    "\5\0\1\212\5\0\6\212\1\304\2\212\1\276\7\212"+
    "\3\0\20\212\2\0\2\212\12\0\1\212\5\0\1\212"+
    "\5\0\11\212\1\276\7\212\3\0\14\212\1\305\3\212"+
    "\2\0\2\212\12\0\1\212\5\0\1\212\7\0\1\306"+
    "\76\0\1\307\124\0\1\310\36\0\16\126\1\311\57\126"+
    "\11\0\1\312\131\0\1\313\35\0\1\314\126\0\1\315"+
    "\44\0\2\15\1\316\6\15\1\0\7\15\3\0\20\15"+
    "\2\0\2\15\11\0\1\122\1\15\5\0\1\15\5\0"+
    "\1\15\1\232\3\15\1\317\3\15\1\0\7\15\3\0"+
    "\20\15\2\0\2\15\11\0\1\122\1\15\5\0\1\15"+
    "\5\0\5\15\1\317\3\15\1\0\7\15\3\0\20\15"+
    "\2\0\2\15\11\0\1\122\1\15\5\0\1\15\5\0"+
    "\7\15\1\320\1\15\1\0\7\15\3\0\20\15\2\0"+
    "\2\15\11\0\1\122\1\15\5\0\1\15\5\0\5\15"+
    "\1\321\3\15\1\0\7\15\3\0\20\15\2\0\2\15"+
    "\11\0\1\122\1\15\5\0\1\15\5\0\2\140\1\236"+
    "\2\140\3\236\1\140\1\0\1\140\3\236\1\140\1\141"+
    "\1\142\3\0\1\140\2\236\6\140\1\236\6\140\2\0"+
    "\1\236\1\140\11\0\1\122\1\140\5\0\1\140\5\0"+
    "\2\140\1\322\6\140\1\0\7\140\3\0\20\140\2\0"+
    "\2\140\11\0\1\122\1\140\5\0\1\140\5\0\1\140"+
    "\1\241\3\140\1\323\3\140\1\0\7\140\3\0\20\140"+
    "\2\0\2\140\11\0\1\122\1\140\5\0\1\140\5\0"+
    "\5\140\1\323\3\140\1\0\7\140\3\0\20\140\2\0"+
    "\2\140\11\0\1\122\1\140\5\0\1\140\5\0\7\140"+
    "\1\324\1\140\1\0\7\140\3\0\20\140\2\0\2\140"+
    "\11\0\1\122\1\140\5\0\1\140\5\0\5\140\1\325"+
    "\3\140\1\0\7\140\3\0\20\140\2\0\2\140\11\0"+
    "\1\122\1\140\5\0\1\140\7\0\1\245\2\0\3\245"+
    "\3\0\3\245\1\0\1\152\1\153\4\0\2\245\6\0"+
    "\1\245\10\0\1\245\31\0\1\326\74\0\1\250\3\0"+
    "\1\327\75\0\1\327\77\0\1\330\73\0\1\331\72\0"+
    "\1\254\2\0\3\254\3\0\3\254\1\0\1\161\1\162"+
    "\4\0\2\254\6\0\1\254\10\0\1\254\22\0\3\101"+
    "\1\102\3\101\1\332\16\101\1\0\52\101\1\102\4\101"+
    "\1\333\15\101\1\0\52\101\1\102\22\101\1\0\10\101"+
    "\1\334\36\101\1\176\2\101\1\260\72\176\3\177\1\261"+
    "\30\177\1\262\44\177\1\261\12\177\1\335\7\177\1\126"+
    "\47\177\3\101\1\102\5\101\1\336\14\101\1\0\52\101"+
    "\1\102\22\101\1\0\16\101\1\337\33\101\1\102\1\101"+
    "\1\340\20\101\1\0\52\101\1\102\3\101\1\341\16\101"+
    "\1\0\52\101\1\102\2\101\1\270\3\101\1\342\13\101"+
    "\1\0\52\101\1\102\6\101\1\342\13\101\1\0\52\101"+
    "\1\102\10\101\1\343\11\101\1\0\52\101\1\102\6\101"+
    "\1\344\13\101\1\0\47\101\22\0\1\106\7\0\2\106"+
    "\6\0\1\106\42\0\1\106\2\0\3\106\3\0\3\106"+
    "\7\0\2\106\6\0\1\106\10\0\1\106\27\0\2\212"+
    "\1\345\6\212\1\276\7\212\3\0\20\212\2\0\2\212"+
    "\12\0\1\212\5\0\1\212\5\0\11\212\1\0\7\212"+
    "\3\0\20\212\2\0\2\212\12\0\1\212\5\0\1\212"+
    "\5\0\3\212\1\346\5\212\1\276\7\212\3\0\20\212"+
    "\2\0\2\212\12\0\1\212\5\0\1\212\5\0\11\212"+
    "\1\276\7\212\3\0\6\212\1\347\11\212\2\0\2\212"+
    "\12\0\1\212\5\0\1\212\5\126\11\214\1\126\7\214"+
    "\3\126\3\214\1\302\14\214\2\126\2\214\12\126\1\214"+
    "\5\126\1\214\5\126\11\214\1\350\7\214\3\126\20\214"+
    "\2\126\2\214\12\126\1\214\5\126\1\214\5\0\4\212"+
    "\1\351\4\212\1\276\7\212\3\0\20\212\2\0\2\212"+
    "\12\0\1\212\5\0\1\212\5\0\11\212\1\276\7\212"+
    "\3\0\14\212\1\352\3\212\2\0\2\212\12\0\1\212"+
    "\5\0\1\212\5\0\1\353\10\212\1\276\7\212\3\0"+
    "\20\212\2\0\2\212\12\0\1\212\5\0\1\212\10\0"+
    "\1\354\100\0\1\355\122\0\1\356\101\0\1\357\77\0"+
    "\1\360\65\0\1\361\76\0\1\362\43\0\3\15\1\363"+
    "\5\15\1\0\7\15\3\0\20\15\2\0\2\15\11\0"+
    "\1\122\1\15\5\0\1\15\5\0\6\15\1\364\2\15"+
    "\1\0\7\15\3\0\20\15\2\0\2\15\11\0\1\122"+
    "\1\15\5\0\1\15\5\0\1\365\10\15\1\0\7\15"+
    "\3\0\20\15\2\0\2\15\11\0\1\122\1\15\5\0"+
    "\1\15\5\0\1\364\10\15\1\0\7\15\3\0\20\15"+
    "\2\0\2\15\11\0\1\122\1\15\5\0\1\15\5\0"+
    "\3\140\1\366\5\140\1\0\7\140\3\0\20\140\2\0"+
    "\2\140\11\0\1\122\1\140\5\0\1\140\5\0\6\140"+
    "\1\367\2\140\1\0\7\140\3\0\20\140\2\0\2\140"+
    "\11\0\1\122\1\140\5\0\1\140\5\0\1\370\10\140"+
    "\1\0\7\140\3\0\20\140\2\0\2\140\11\0\1\122"+
    "\1\140\5\0\1\140\5\0\1\367\10\140\1\0\7\140"+
    "\3\0\20\140\2\0\2\140\11\0\1\122\1\140\5\0"+
    "\1\140\10\0\1\371\100\0\1\372\67\0\1\373\75\0"+
    "\1\372\70\0\3\101\1\102\4\101\1\374\15\101\1\0"+
    "\52\101\1\102\7\101\1\375\12\101\1\0\52\101\1\102"+
    "\22\101\1\0\11\101\1\376\40\101\1\102\22\101\1\0"+
    "\15\101\1\377\34\101\1\102\22\101\1\0\17\101\1\u0100"+
    "\32\101\1\102\22\101\1\0\7\101\1\u0101\42\101\1\102"+
    "\4\101\1\u0102\15\101\1\0\52\101\1\102\7\101\1\u0103"+
    "\12\101\1\0\52\101\1\102\1\101\1\u0104\20\101\1\0"+
    "\52\101\1\102\1\101\1\u0103\20\101\1\0\47\101\5\0"+
    "\3\212\1\u0105\5\212\1\276\7\212\3\0\20\212\2\0"+
    "\2\212\12\0\1\212\5\0\1\212\5\0\6\212\1\u0106"+
    "\2\212\1\276\7\212\3\0\20\212\2\0\2\212\12\0"+
    "\1\212\5\0\1\212\5\0\11\212\1\276\7\212\3\0"+
    "\7\212\1\u0107\10\212\2\0\2\212\12\0\1\212\5\0"+
    "\1\212\5\0\11\212\1\276\7\212\3\0\13\212\1\u0108"+
    "\4\212\2\0\2\212\12\0\1\212\5\0\1\212\5\0"+
    "\11\212\1\276\7\212\3\0\15\212\1\u0109\2\212\2\0"+
    "\2\212\12\0\1\212\5\0\1\212\5\0\11\212\1\276"+
    "\7\212\3\0\5\212\1\u010a\12\212\2\0\2\212\12\0"+
    "\1\212\5\0\1\212\11\0\1\u010b\122\0\1\u010c\100\0"+
    "\1\u010d\41\0\1\u010e\103\0\1\u010f\122\0\1\u0110\53\0"+
    "\1\u0111\64\0\4\15\1\u0112\4\15\1\0\7\15\3\0"+
    "\20\15\2\0\2\15\11\0\1\122\1\15\5\0\1\15"+
    "\5\0\7\15\1\u0113\1\15\1\0\7\15\3\0\20\15"+
    "\2\0\2\15\11\0\1\122\1\15\5\0\1\15\5\0"+
    "\1\15\1\u0114\7\15\1\0\7\15\3\0\20\15\2\0"+
    "\2\15\11\0\1\122\1\15\5\0\1\15\5\0\4\140"+
    "\1\u0115\4\140\1\0\7\140\3\0\20\140\2\0\2\140"+
    "\11\0\1\122\1\140\5\0\1\140\5\0\7\140\1\u0113"+
    "\1\140\1\0\7\140\3\0\20\140\2\0\2\140\11\0"+
    "\1\122\1\140\5\0\1\140\5\0\1\140\1\u0116\7\140"+
    "\1\0\7\140\3\0\20\140\2\0\2\140\11\0\1\122"+
    "\1\140\5\0\1\140\11\0\1\u0117\100\0\1\u0113\67\0"+
    "\1\u0118\67\0\3\101\1\102\5\101\1\u0119\14\101\1\0"+
    "\52\101\1\102\22\101\1\0\7\101\1\u011a\42\101\1\102"+
    "\22\101\1\0\12\101\1\u011b\37\101\1\102\1\101\1\u011c"+
    "\20\101\1\0\52\101\1\102\7\101\1\u011d\12\101\1\0"+
    "\52\101\1\102\22\101\1\0\11\101\1\u011e\40\101\1\102"+
    "\5\101\1\u011f\14\101\1\0\52\101\1\102\10\101\1\u0120"+
    "\11\101\1\0\52\101\1\102\2\101\1\u0121\17\101\1\0"+
    "\47\101\5\0\4\212\1\u0122\4\212\1\276\7\212\3\0"+
    "\20\212\2\0\2\212\12\0\1\212\5\0\1\212\5\0"+
    "\11\212\1\276\7\212\3\0\5\212\1\u0123\12\212\2\0"+
    "\2\212\12\0\1\212\5\0\1\212\5\0\11\212\1\276"+
    "\7\212\3\0\10\212\1\u0124\7\212\2\0\2\212\12\0"+
    "\1\212\5\0\1\212\5\0\1\u0125\10\212\1\276\7\212"+
    "\3\0\20\212\2\0\2\212\12\0\1\212\5\0\1\212"+
    "\5\0\6\212\1\u0126\2\212\1\276\7\212\3\0\20\212"+
    "\2\0\2\212\12\0\1\212\5\0\1\212\5\0\11\212"+
    "\1\276\7\212\3\0\7\212\1\u0127\10\212\2\0\2\212"+
    "\12\0\1\212\5\0\1\212\12\0\1\u0128\76\0\1\u0129"+
    "\124\0\1\u012a\41\0\1\u012b\126\0\1\u012c\43\0\1\u012d"+
    "\75\0\5\15\1\u0114\3\15\1\0\7\15\3\0\20\15"+
    "\2\0\2\15\11\0\1\122\1\15\5\0\1\15\1\u0113"+
    "\2\0\1\u012e\23\u0113\1\0\46\u0113\5\0\6\15\1\u0113"+
    "\2\15\1\0\7\15\3\0\20\15\2\0\2\15\11\0"+
    "\1\122\1\15\5\0\1\15\5\0\5\140\1\u0116\3\140"+
    "\1\0\7\140\3\0\20\140\2\0\2\140\11\0\1\122"+
    "\1\140\5\0\1\140\5\0\6\140\1\u0113\2\140\1\0"+
    "\7\140\3\0\20\140\2\0\2\140\11\0\1\122\1\140"+
    "\5\0\1\140\12\0\1\u0118\76\0\1\u0113\62\0\3\101"+
    "\1\102\6\101\1\u012f\13\101\1\0\52\101\1\102\7\101"+
    "\1\u0130\12\101\1\0\52\101\1\102\22\101\1\0\13\101"+
    "\1\u0131\36\101\1\102\2\101\1\u0132\17\101\1\0\52\101"+
    "\1\102\22\101\1\0\10\101\1\u0133\41\101\1\102\1\101"+
    "\1\u0134\20\101\1\0\52\101\1\102\6\101\1\u0121\13\101"+
    "\1\0\47\101\1\u0120\2\101\1\u0135\22\u0120\1\u0113\1\101"+
    "\46\u0120\3\101\1\102\7\101\1\u0120\12\101\1\0\47\101"+
    "\5\0\5\212\1\u0136\3\212\1\276\7\212\3\0\20\212"+
    "\2\0\2\212\12\0\1\212\5\0\1\212\5\0\6\212"+
    "\1\u0137\2\212\1\276\7\212\3\0\20\212\2\0\2\212"+
    "\12\0\1\212\5\0\1\212\5\0\11\212\1\276\7\212"+
    "\3\0\11\212\1\u0138\6\212\2\0\2\212\12\0\1\212"+
    "\5\0\1\212\5\0\1\212\1\u0139\7\212\1\276\7\212"+
    "\3\0\20\212\2\0\2\212\12\0\1\212\5\0\1\212"+
    "\5\0\11\212\1\276\7\212\3\0\6\212\1\u013a\11\212"+
    "\2\0\2\212\12\0\1\212\5\0\1\212\5\0\1\u013b"+
    "\10\212\1\276\7\212\3\0\20\212\2\0\2\212\12\0"+
    "\1\212\5\0\1\212\13\0\1\u013c\122\0\1\u013d\53\0"+
    "\1\u013e\75\0\1\u013f\72\0\1\u0140\76\0\1\u0141\61\0"+
    "\2\u0113\1\u0142\2\u012e\22\u0113\1\0\46\u0113\3\101\1\102"+
    "\7\101\1\u0143\12\101\1\0\52\101\1\102\22\101\1\0"+
    "\11\101\1\u0144\40\101\1\102\12\101\1\u0145\7\101\1\0"+
    "\52\101\1\102\12\101\1\u0146\7\101\1\0\52\101\1\102"+
    "\7\101\1\u0147\12\101\1\0\52\101\1\102\10\101\1\u0148"+
    "\11\101\1\0\47\101\2\u0120\1\u0149\1\u0135\1\u014a\22\u0120"+
    "\1\101\46\u0120\5\0\6\212\1\u014b\2\212\1\276\7\212"+
    "\3\0\20\212\2\0\2\212\12\0\1\212\5\0\1\212"+
    "\5\0\11\212\1\276\7\212\3\0\7\212\1\u014c\10\212"+
    "\2\0\2\212\12\0\1\212\5\0\1\212\5\0\11\212"+
    "\1\u014d\7\212\3\0\20\212\2\0\2\212\12\0\1\212"+
    "\5\0\1\212\5\0\11\212\1\u014e\7\212\3\0\20\212"+
    "\2\0\2\212\12\0\1\212\5\0\1\212\5\0\6\212"+
    "\1\u014f\2\212\1\276\7\212\3\0\20\212\2\0\2\212"+
    "\12\0\1\212\5\0\1\212\5\0\7\212\1\u0150\1\212"+
    "\1\276\7\212\3\0\20\212\2\0\2\212\12\0\1\212"+
    "\5\0\1\212\16\0\1\u0151\65\0\1\u0152\34\0\1\u0153"+
    "\100\0\1\u0154\67\0\1\u0155\35\0\2\u0113\1\0\1\u012e"+
    "\23\u0113\1\0\46\u0113\3\101\1\102\12\101\1\u0156\7\101"+
    "\1\0\52\101\1\102\2\101\1\u0157\17\101\1\0\14\101"+
    "\1\u0158\35\101\1\102\22\101\1\0\17\101\1\u0159\32\101"+
    "\1\102\22\101\1\0\11\101\1\u015a\35\101\2\u0120\1\101"+
    "\1\u0135\22\u0120\1\u0113\1\101\50\u0120\1\u0149\1\u0135\1\u014a"+
    "\21\u0120\1\u0113\1\101\46\u0120\5\0\11\212\1\u015b\7\212"+
    "\3\0\20\212\2\0\2\212\12\0\1\212\5\0\1\212"+
    "\5\0\1\212\1\u015c\7\212\1\276\7\212\3\0\12\212"+
    "\1\u015d\5\212\2\0\2\212\12\0\1\212\5\0\1\212"+
    "\5\0\11\212\1\276\7\212\3\0\15\212\1\u015e\2\212"+
    "\2\0\2\212\12\0\1\212\5\0\1\212\5\0\11\212"+
    "\1\276\7\212\3\0\7\212\1\u015f\10\212\2\0\2\212"+
    "\12\0\1\212\5\0\1\212\47\0\1\u0160\74\0\1\u0161"+
    "\70\0\1\u0162\42\0\1\u0163\67\0\3\101\1\102\22\101"+
    "\1\0\20\101\1\u0164\31\101\1\102\22\101\1\0\17\101"+
    "\1\u0165\32\101\1\102\22\101\1\0\12\101\1\u0166\37\101"+
    "\1\102\2\101\1\u0167\17\101\1\0\47\101\5\0\11\212"+
    "\1\276\7\212\3\0\16\212\1\u0168\1\212\2\0\2\212"+
    "\12\0\1\212\5\0\1\212\5\0\11\212\1\276\7\212"+
    "\3\0\15\212\1\u0169\2\212\2\0\2\212\12\0\1\212"+
    "\5\0\1\212\5\0\11\212\1\276\7\212\3\0\10\212"+
    "\1\u016a\7\212\2\0\2\212\12\0\1\212\5\0\1\212"+
    "\5\0\1\212\1\u016b\7\212\1\276\7\212\3\0\20\212"+
    "\2\0\2\212\12\0\1\212\5\0\1\212\12\0\1\u016c"+
    "\132\0\1\u016d\41\0\1\u016e\131\0\1\u016f\26\0\3\101"+
    "\1\102\6\101\1\u0170\13\101\1\0\52\101\1\102\22\101"+
    "\1\0\20\101\1\u0171\31\101\1\102\7\101\1\u0172\12\101"+
    "\1\0\52\101\1\102\22\101\1\0\20\101\1\u0173\26\101"+
    "\5\0\5\212\1\u0174\3\212\1\276\7\212\3\0\20\212"+
    "\2\0\2\212\12\0\1\212\5\0\1\212\5\0\11\212"+
    "\1\276\7\212\3\0\16\212\1\u0175\1\212\2\0\2\212"+
    "\12\0\1\212\5\0\1\212\5\0\6\212\1\u0176\2\212"+
    "\1\276\7\212\3\0\20\212\2\0\2\212\12\0\1\212"+
    "\5\0\1\212\5\0\11\212\1\276\7\212\3\0\16\212"+
    "\1\u0177\1\212\2\0\2\212\12\0\1\212\5\0\1\212"+
    "\13\0\1\u0178\125\0\1\u0179\50\0\1\u017a\117\0\1\u017b"+
    "\35\0\3\101\1\102\7\101\1\u017c\12\101\1\0\52\101"+
    "\1\102\22\101\1\0\14\101\1\u017d\35\101\1\102\12\101"+
    "\1\u017e\7\101\1\0\52\101\1\102\22\101\1\0\11\101"+
    "\1\u017f\35\101\5\0\6\212\1\u0180\2\212\1\276\7\212"+
    "\3\0\20\212\2\0\2\212\12\0\1\212\5\0\1\212"+
    "\5\0\11\212\1\276\7\212\3\0\12\212\1\u0181\5\212"+
    "\2\0\2\212\12\0\1\212\5\0\1\212\5\0\11\212"+
    "\1\u0182\7\212\3\0\20\212\2\0\2\212\12\0\1\212"+
    "\5\0\1\212\5\0\11\212\1\276\7\212\3\0\7\212"+
    "\1\u0183\10\212\2\0\2\212\12\0\1\212\5\0\1\212"+
    "\16\0\1\u0184\72\0\1\u0185\130\0\1\u0186\27\0\3\101"+
    "\1\102\12\101\1\u0187\7\101\1\0\52\101\1\102\7\101"+
    "\1\u0188\12\101\1\0\52\101\1\102\22\101\1\0\17\101"+
    "\1\u0189\27\101\5\0\11\212\1\u018a\7\212\3\0\20\212"+
    "\2\0\2\212\12\0\1\212\5\0\1\212\5\0\6\212"+
    "\1\u018b\2\212\1\276\7\212\3\0\20\212\2\0\2\212"+
    "\12\0\1\212\5\0\1\212\5\0\11\212\1\276\7\212"+
    "\3\0\15\212\1\u018c\2\212\2\0\2\212\12\0\1\212"+
    "\5\0\1\212\46\0\1\u018d\42\0\1\u018e\62\0\3\101"+
    "\1\102\22\101\1\0\17\101\1\u018f\32\101\1\102\7\101"+
    "\1\u0190\12\101\1\0\47\101\5\0\11\212\1\276\7\212"+
    "\3\0\15\212\1\u0191\2\212\2\0\2\212\12\0\1\212"+
    "\5\0\1\212\5\0\6\212\1\u0192\2\212\1\276\7\212"+
    "\3\0\20\212\2\0\2\212\12\0\1\212\5\0\1\212"+
    "\36\0\1\u0193\53\0\1\u0194\61\0\3\101\1\102\22\101"+
    "\1\0\7\101\1\u0195\42\101\1\102\10\101\1\u0196\11\101"+
    "\1\0\47\101\5\0\11\212\1\276\7\212\3\0\5\212"+
    "\1\u0197\12\212\2\0\2\212\12\0\1\212\5\0\1\212"+
    "\5\0\7\212\1\u0198\1\212\1\276\7\212\3\0\20\212"+
    "\2\0\2\212\12\0\1\212\5\0\1\212\50\0\1\u0199"+
    "\43\0\1\u019a\57\0\3\101\1\102\22\101\1\0\21\101"+
    "\1\u019b\30\101\1\102\12\101\1\u019c\7\101\1\0\47\101"+
    "\5\0\11\212\1\276\7\212\3\0\17\212\1\u019d\2\0"+
    "\2\212\12\0\1\212\5\0\1\212\5\0\11\212\1\u019e"+
    "\7\212\3\0\20\212\2\0\2\212\12\0\1\212\5\0"+
    "\1\212\16\0\1\u019f\57\0\3\101\1\102\12\101\1\u01a0"+
    "\7\101\1\0\47\101\5\0\11\212\1\u01a1\7\212\3\0"+
    "\20\212\2\0\2\212\12\0\1\212\5\0\1\212";

  private static int [] zzUnpackTrans() {
    int [] result = new int[20894];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\12\0\1\11\3\1\1\11\1\1\13\11\5\1\1\11"+
    "\1\1\2\11\2\1\1\11\10\1\2\11\1\1\1\11"+
    "\1\1\2\11\2\1\3\11\1\1\2\11\1\1\1\11"+
    "\3\1\1\11\1\1\1\11\3\1\1\11\1\1\1\11"+
    "\4\1\2\11\2\0\1\1\6\0\4\1\1\0\2\1"+
    "\5\0\4\1\5\0\2\1\1\0\10\11\14\1\1\0"+
    "\7\1\10\0\7\1\5\0\1\11\1\1\5\0\1\11"+
    "\32\1\3\0\1\11\4\0\4\1\10\0\22\1\7\0"+
    "\3\1\6\0\17\1\6\0\1\11\3\1\4\0\17\1"+
    "\6\0\16\1\2\0\2\11\2\0\17\1\1\11\4\0"+
    "\12\1\4\0\10\1\4\0\10\1\2\0\1\11\1\0"+
    "\10\1\1\11\2\0\6\1\2\0\4\1\2\0\4\1"+
    "\1\0\1\11\4\1\1\11\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[417];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private final Stack<Integer> stack = new Stack<>();

    private void pushState(int state) {
        stack.push(yystate());
        yybegin(state);
    }

    private void popState() {
        assert !stack.empty();
        yybegin(stack.pop());
    }

    private void resetState() {
        stack.clear();
        yybegin(YYINITIAL);
    }
    private int parenCount = 0;

    private void beginExpr() {
        parenCount = 0;
        pushState(WAITING_EXPR);
    }

    private void openParen() {
        parenCount++;
    }

    private void closeParen() {
        if (parenCount == 0) {
            popState();
        } else {
            parenCount--;
        }
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  DtsLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { if (yystate() != YYINITIAL) {
      resetState();
      yypushback(1);
    } else {
      return TokenType.BAD_CHARACTER;
    }
            } 
            // fall through
          case 69: break;
          case 2: 
            { return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 70: break;
          case 3: 
            { return DtsTypes.NAME;
            } 
            // fall through
          case 71: break;
          case 4: 
            { return DtsTypes.SLASH;
            } 
            // fall through
          case 72: break;
          case 5: 
            { pushState(WAITING_STRING); return DtsTypes.DQUOTE;
            } 
            // fall through
          case 73: break;
          case 6: 
            { return DtsTypes.SEMICOLON;
            } 
            // fall through
          case 74: break;
          case 7: 
            { pushState(WAITING_VALUE); return DtsTypes.ASSIGN;
            } 
            // fall through
          case 75: break;
          case 8: 
            { pushState(WAITING_HANDLE); return DtsTypes.HANDLE;
            } 
            // fall through
          case 76: break;
          case 9: 
            { return DtsTypes.LBRACE;
            } 
            // fall through
          case 77: break;
          case 10: 
            { return DtsTypes.RBRACE;
            } 
            // fall through
          case 78: break;
          case 11: 
            { return DtsTypes.LPAREN;
            } 
            // fall through
          case 79: break;
          case 12: 
            { return DtsTypes.RPAREN;
            } 
            // fall through
          case 80: break;
          case 13: 
            { pushState(WAITING_BYTE); return DtsTypes.LBRACKET;
            } 
            // fall through
          case 81: break;
          case 14: 
            { return DtsTypes.RBRACKET;
            } 
            // fall through
          case 82: break;
          case 15: 
            { pushState(WAITING_CELL); return DtsTypes.LANGL;
            } 
            // fall through
          case 83: break;
          case 16: 
            { return DtsTypes.RANGL;
            } 
            // fall through
          case 84: break;
          case 17: 
            { return DtsTypes.INT_VALUE;
            } 
            // fall through
          case 85: break;
          case 18: 
            { pushState(WAITING_CHAR); return DtsTypes.SQUOTE;
            } 
            // fall through
          case 86: break;
          case 19: 
            { beginExpr(); return DtsTypes.LPAREN;
            } 
            // fall through
          case 87: break;
          case 20: 
            { popState(); return DtsTypes.RANGL;
            } 
            // fall through
          case 88: break;
          case 21: 
            { popState(); return DtsTypes.RBRACKET;
            } 
            // fall through
          case 89: break;
          case 22: 
            { return DtsTypes.COMMA;
            } 
            // fall through
          case 90: break;
          case 23: 
            { popState(); return DtsTypes.INT_VALUE;
            } 
            // fall through
          case 91: break;
          case 24: 
            { return DtsTypes.DIV;
            } 
            // fall through
          case 92: break;
          case 25: 
            { return DtsTypes.MUL;
            } 
            // fall through
          case 93: break;
          case 26: 
            { return DtsTypes.SUB;
            } 
            // fall through
          case 94: break;
          case 27: 
            { return DtsTypes.AND;
            } 
            // fall through
          case 95: break;
          case 28: 
            { openParen(); return DtsTypes.LPAREN;
            } 
            // fall through
          case 96: break;
          case 29: 
            { closeParen(); return DtsTypes.RPAREN;
            } 
            // fall through
          case 97: break;
          case 30: 
            { return DtsTypes.LES;
            } 
            // fall through
          case 98: break;
          case 31: 
            { return DtsTypes.GRT;
            } 
            // fall through
          case 99: break;
          case 32: 
            { return DtsTypes.COLON;
            } 
            // fall through
          case 100: break;
          case 33: 
            { return DtsTypes.ADD;
            } 
            // fall through
          case 101: break;
          case 34: 
            { return DtsTypes.MOD;
            } 
            // fall through
          case 102: break;
          case 35: 
            { return DtsTypes.OR;
            } 
            // fall through
          case 103: break;
          case 36: 
            { return DtsTypes.XOR;
            } 
            // fall through
          case 104: break;
          case 37: 
            { return DtsTypes.NOT;
            } 
            // fall through
          case 105: break;
          case 38: 
            { return DtsTypes.L_NOT;
            } 
            // fall through
          case 106: break;
          case 39: 
            { return DtsTypes.TERNARY;
            } 
            // fall through
          case 107: break;
          case 40: 
            { return DtsTypes.STRING_VALUE;
            } 
            // fall through
          case 108: break;
          case 41: 
            { popState(); return DtsTypes.DQUOTE;
            } 
            // fall through
          case 109: break;
          case 42: 
            { return DtsTypes.CHAR_VALUE;
            } 
            // fall through
          case 110: break;
          case 43: 
            { popState(); return DtsTypes.SQUOTE;
            } 
            // fall through
          case 111: break;
          case 44: 
            { popState(); yypushback(1);
            } 
            // fall through
          case 112: break;
          case 45: 
            { popState(); return DtsTypes.NAME;
            } 
            // fall through
          case 113: break;
          case 46: 
            { return DtsTypes.PATH;
            } 
            // fall through
          case 114: break;
          case 47: 
            { popState(); return DtsTypes.RBRACE;
            } 
            // fall through
          case 115: break;
          case 48: 
            { return DtsTypes.LABEL;
            } 
            // fall through
          case 116: break;
          case 49: 
            { return DtsTypes.COMMENT_EOL;
            } 
            // fall through
          case 117: break;
          case 50: 
            { return DtsTypes.BYTE_VALUE;
            } 
            // fall through
          case 118: break;
          case 51: 
            { return DtsTypes.EQ;
            } 
            // fall through
          case 119: break;
          case 52: 
            { return DtsTypes.L_AND;
            } 
            // fall through
          case 120: break;
          case 53: 
            { return DtsTypes.LEQ;
            } 
            // fall through
          case 121: break;
          case 54: 
            { return DtsTypes.LSH;
            } 
            // fall through
          case 122: break;
          case 55: 
            { return DtsTypes.GEQ;
            } 
            // fall through
          case 123: break;
          case 56: 
            { return DtsTypes.RSH;
            } 
            // fall through
          case 124: break;
          case 57: 
            { return DtsTypes.L_OR;
            } 
            // fall through
          case 125: break;
          case 58: 
            { return DtsTypes.NEQ;
            } 
            // fall through
          case 126: break;
          case 59: 
            { return DtsTypes.COMMENT_C;
            } 
            // fall through
          case 127: break;
          case 60: 
            { pushState(WAITING_BITS); return DtsTypes.BITS;
            } 
            // fall through
          case 128: break;
          case 61: 
            { return DtsTypes.PP_STATEMENT_MARKER;
            } 
            // fall through
          case 129: break;
          case 62: 
            { resetState(); return DtsTypes.V1;
            } 
            // fall through
          case 130: break;
          case 63: 
            { resetState(); return DtsTypes.PLUGIN;
            } 
            // fall through
          case 131: break;
          case 64: 
            { pushState(WAITING_INCLUDE); return DtsTypes.INCLUDE;
            } 
            // fall through
          case 132: break;
          case 65: 
            { resetState(); pushState(WAITING_CELL); return DtsTypes.MEMRESERVE;
            } 
            // fall through
          case 133: break;
          case 66: 
            { resetState(); return DtsTypes.DELETE_NODE;
            } 
            // fall through
          case 134: break;
          case 67: 
            { resetState(); return DtsTypes.OMIT_NODE;
            } 
            // fall through
          case 135: break;
          case 68: 
            { resetState(); return DtsTypes.DELETE_PROP;
            } 
            // fall through
          case 136: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
