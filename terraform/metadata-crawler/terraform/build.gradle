import groovy.json.JsonOutput
import groovy.json.JsonSlurper

apply plugin: 'java'
apply plugin: 'maven-publish'

group = System.getenv('ARTIFACT_GROUP') ?: 'org.intellij.plugins.hcl.terraform'
version = System.getenv('ARTIFACT_VERSION') ?: '2024.1.2'

def repositoryUrl = System.getenv('REPO_URL') ?: "https://packages.jetbrains.team/maven/p/ij/intellij-dependencies"
def repoUsername = System.getenv('REPO_USERNAME') ?: 'spaceUsername'
def repoPassword = System.getenv('REPO_PASSWORD') ?: 'spacePassword'

boolean isSnapshot = version.endsWith('-SNAPSHOT')

sourceSets.main.resources { srcDirs += 'resources' }
sourceSets.main.resources { srcDirs += 'plugins-meta/resources' }

tasks.register('collectMetadata', Exec) {
  commandLine 'bash', 'ls-schemas-extractor/bin/ls-schemas-extractor'
}

processResources {
  dependsOn collectMetadata
  doLast {
    if (!isSnapshot) {
      println("Processing JSON files in ${outputs.files.asPath}")
      fileTree(dir: outputs.files.asPath).filter { file -> file.name.endsWith('.json') }.each { file ->
        def slurper = new JsonSlurper()
        println("Processing schemas json: ${file}")
        def jsonContent = slurper.parse(file)
        def metadataFile = new File(file.parent, "${file.name}.metadata")
        println("Processing metadata json: ${metadataFile}")
        def metadataContent = new HashMap()
        if (metadataFile.exists()) {
          metadataContent.putAll(slurper.parse(metadataFile as File) as Map)
          metadataFile.delete()
        }
        def mergedContent = new HashMap()
        mergedContent.put("metadata", metadataContent)
        mergedContent.put("schemas", jsonContent)
        file.text = JsonOutput.toJson(mergedContent)
      }
    }
  }
}

jar {
  includeEmptyDirs false
  eachFile { details ->
    details.path = "terraform/$details.path"
  }
}


publishing {
  publications {
    maven(MavenPublication) {
      from components.java
      groupId = project.group
      artifactId = project.archivesBaseName
      version = project.version
      suppressAllPomMetadataWarnings()
    }
  }
  repositories {
    maven {
      url repositoryUrl
      allowInsecureProtocol true
      credentials {
        username = repoUsername
        password = repoPassword
      }
    }
  }
}
