import com.bmuschko.gradle.docker.tasks.image.*
import com.bmuschko.gradle.docker.tasks.container.*

plugins {
  id 'com.bmuschko.docker-remote-api' version '9.4.0'
}

def crawlerContainerName = "terraform_metadata_crawler"

repositories {
  mavenCentral()
}

apply plugin: 'com.bmuschko.docker-remote-api'

version = '2024.1.2'

task clean {
  delete 'build'
  delete 'docker/terraform-metadata'
}

task buildSchemasExtractor(type: GradleBuild) {
  dir = 'ls-schemas-extractor'
  tasks = ['clean', 'build']
}

task copyModelDir(type: Copy) {
  from 'terraform'
  includeEmptyDirs true
  into 'docker/terraform-metadata'
}

task copySchemasExtractor(type: Copy) {
  dependsOn buildSchemasExtractor
  from zipTree('ls-schemas-extractor/build/distributions/ls-schemas-extractor.zip')
  include '**/*'
  into 'docker/terraform-metadata'
}

task copyAll {
  dependsOn clean, copySchemasExtractor, copyModelDir
}

task buildDockerImage(type: DockerBuildImage) {
  dependsOn copyAll
  inputDir = file('docker')
  images.add("intellij.terraform/metadata-crawler:$version")
}

task createContainer(type: DockerCreateContainer) {
  dependsOn buildDockerImage
  targetImageId buildDockerImage.imageId
  containerName = "$crawlerContainerName"
  //Uncomment for a local execution to see what we have in the final jar
  hostConfig.getBinds().put("/Users/Shared/metadata", "/opt/terraform-metadata/build/libs")
  hostConfig.memory = 4096L*1024*1024
  cmd = ["publish"]
}

task startContainer(type: DockerStartContainer) {
  targetContainerId("$crawlerContainerName")
}

task stopContainer(type: DockerStopContainer) {
  targetContainerId("$crawlerContainerName")
}

task removeContainer(type: DockerRemoveContainer) {
  targetContainerId("$crawlerContainerName")
}

