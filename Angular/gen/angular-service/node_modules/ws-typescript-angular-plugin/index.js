"use strict";
// Copyright 2000-2022 JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license.
const createLanguageServicePlugin_1 = require("@volar/typescript/lib/quickstart/createLanguageServicePlugin");
const code_1 = require("./code");
const decorateLanguageService_1 = require("./decorateLanguageService");
const tcbBlocks = new Map();
(0, decorateLanguageService_1.patchVolarToDecorateLanguageService)();
function loadLanguagePlugins(ts, info) {
    if (!addedCommands) {
        addNewCommands(ts, info);
        addedCommands = true;
    }
    return [{
            getLanguageId(scriptId) {
                return scriptId.endsWith(".html") ? "ng-html" : undefined;
            },
            createVirtualCode(scriptId, languageId, snapshot) {
                if (languageId !== "ng-html")
                    return undefined;
                let virtualCode = tcbBlocks.get(scriptId);
                if (!virtualCode) {
                    virtualCode = new code_1.AngularVirtualCode("ng-html");
                    tcbBlocks.set(scriptId, virtualCode);
                }
                return virtualCode; // tcbBlocks.get(scriptId)?.checkUpdate(snapshot, languageId)
            },
            updateVirtualCode(_scriptId, virtualCode, newSnapshot) {
                return virtualCode; //?.checkUpdate(newSnapshot)
            },
            typescript: {
                extraFileExtensions: [],
                getServiceScript(rootVirtualCode) {
                    return {
                        code: rootVirtualCode,
                        extension: ".ts",
                        scriptKind: ts.ScriptKind.TS
                    };
                }
            }
        }];
}
const ngTranspiledTemplateCommand = "ngTranspiledTemplate";
let addedCommands = false;
function addNewCommands(ts, info) {
    let projectService = info.project.projectService;
    projectService.logger.info("Angular: called handler processing");
    let session = info.session;
    if (session == undefined) {
        projectService.logger.info("Angular: there is no session in info.");
        return;
    }
    if (session.addProtocolHandler == undefined) {
        // addProtocolHandler was introduced in TS 4.4 or 4.5 in 2021, see https://github.com/microsoft/TypeScript/issues/43893
        projectService.logger.info("Angular: there is no addProtocolHandler method.");
        return;
    }
    session.addProtocolHandler(ngTranspiledTemplateCommand, ngTranspiledTemplateHandler.bind(null, ts, projectService));
    projectService.logger.info("Angular specific commands are successfully added.");
}
const ngTranspiledTemplateHandler = (_ts, _projectService, request) => {
    const requestArguments = request.arguments;
    const fileName = requestArguments.file;
    let virtualCode = tcbBlocks.get(fileName);
    if (virtualCode === undefined) {
        virtualCode = new code_1.AngularVirtualCode("ng-html");
        tcbBlocks.set(fileName, virtualCode);
    }
    virtualCode.update(requestArguments.content, requestArguments.transpiledContent, requestArguments.mappings);
    return {
        responseRequired: true,
        response: {}
    };
};
const init = (0, createLanguageServicePlugin_1.createLanguageServicePlugin)(loadLanguagePlugins);
module.exports = init;
