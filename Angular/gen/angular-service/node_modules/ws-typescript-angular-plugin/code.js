"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AngularVirtualCode = void 0;
class AngularVirtualCode {
    constructor(languageId) {
        this.languageId = languageId;
        this.snapshot = {
            getText: (start, end) => "",
            getLength: () => 0,
            getChangeRange(oldSnapshot) {
                return {
                    span: {
                        start: 0,
                        length: oldSnapshot.getLength(),
                    },
                    newLength: 0
                };
            },
        };
        this.mappings = [];
        this.id = "main";
        this.sourceCode = "";
    }
    checkUpdate(snapshot, languageId) {
        if (snapshot.getText(0, snapshot.getLength()) !== this.sourceCode) {
            throw new Error("AngularVirtualCode source code out of sync.");
        }
        if (languageId !== undefined && languageId !== this.languageId) {
            throw new Error(`AngularVirtualCode languageId out of sync - expected ${languageId} by it is ${this.languageId}.`);
        }
        return this;
    }
    update(sourceCode, transpiledCode, mappings) {
        this.sourceCode = sourceCode !== null && sourceCode !== void 0 ? sourceCode : "";
        this.mappings = mappings;
        const changeRanges = new Map();
        this.snapshot = {
            getText: (start, end) => (transpiledCode !== null && transpiledCode !== void 0 ? transpiledCode : "").slice(start, end),
            getLength: () => (transpiledCode !== null && transpiledCode !== void 0 ? transpiledCode : "").length,
            getChangeRange(oldSnapshot) {
                if (!changeRanges.has(oldSnapshot)) {
                    changeRanges.set(oldSnapshot, undefined);
                    const oldText = oldSnapshot.getText(0, oldSnapshot.getLength());
                    const changeRange = fullDiffTextChangeRange(oldText, (transpiledCode !== null && transpiledCode !== void 0 ? transpiledCode : ""));
                    if (changeRange) {
                        changeRanges.set(oldSnapshot, changeRange);
                    }
                }
                return changeRanges.get(oldSnapshot);
            },
        };
    }
}
exports.AngularVirtualCode = AngularVirtualCode;
function fullDiffTextChangeRange(oldText, newText) {
    for (let start = 0; start < oldText.length && start < newText.length; start++) {
        if (oldText[start] !== newText[start]) {
            let end = oldText.length;
            for (let i = 0; i < oldText.length - start && i < newText.length - start; i++) {
                if (oldText[oldText.length - i - 1] !== newText[newText.length - i - 1]) {
                    break;
                }
                end--;
            }
            let length = end - start;
            let newLength = length + (newText.length - oldText.length);
            if (newLength < 0) {
                length -= newLength;
                newLength = 0;
            }
            return {
                span: { start, length },
                newLength,
            };
        }
    }
    return undefined;
}
